/* CTF 1.8 */

trace {
	major = 1;
	minor = 8;
	uuid = "9e46faef-b4c6-49e1-abcf-f81d57485ab5";
	byte_order = le;
	packet.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } magic;
		integer { size = 8; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } uuid[16];
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } stream_id;
	} align(8);
};

clock {
	name = my_clock;
	uuid = "4ddb9cb2-ab7b-4d3b-aec1-40d436240b38";
	description = "this is my clock";
	freq = 1000000000;
	precision = 1;
	offset_s = 0;
	offset = 0;
	absolute = FALSE;
};

stream {
	id = 0;
	event.header := struct {
		integer { size = 32; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } id;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; map = clock.my_clock.value; } timestamp;
	} align(8);

	packet.context := struct {
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } timestamp_begin;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } timestamp_end;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } content_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } packet_size;
		integer { size = 64; align = 8; signed = false; encoding = none; base = decimal; byte_order = le; } events_discarded;
	} align(8);
};

event {
	id = 0;
	name = "HEARTBEAT";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_TYPE_GENERIC" = 0, "MAV_TYPE_FIXED_WING" = 1, "MAV_TYPE_QUADROTOR" = 2, "MAV_TYPE_COAXIAL" = 3, "MAV_TYPE_HELICOPTER" = 4, "MAV_TYPE_ANTENNA_TRACKER" = 5, "MAV_TYPE_GCS" = 6, "MAV_TYPE_AIRSHIP" = 7, "MAV_TYPE_FREE_BALLOON" = 8, "MAV_TYPE_ROCKET" = 9, "MAV_TYPE_GROUND_ROVER" = 10, "MAV_TYPE_SURFACE_BOAT" = 11, "MAV_TYPE_SUBMARINE" = 12, "MAV_TYPE_HEXAROTOR" = 13, "MAV_TYPE_OCTOROTOR" = 14, "MAV_TYPE_TRICOPTER" = 15, "MAV_TYPE_FLAPPING_WING" = 16, "MAV_TYPE_KITE" = 17, "MAV_TYPE_ONBOARD_CONTROLLER" = 18, "MAV_TYPE_VTOL_DUOROTOR" = 19, "MAV_TYPE_VTOL_QUADROTOR" = 20, "MAV_TYPE_VTOL_TILTROTOR" = 21, "MAV_TYPE_VTOL_RESERVED2" = 22, "MAV_TYPE_VTOL_RESERVED3" = 23, "MAV_TYPE_VTOL_RESERVED4" = 24, "MAV_TYPE_VTOL_RESERVED5" = 25, "MAV_TYPE_GIMBAL" = 26, "MAV_TYPE_ADSB" = 27, "MAV_TYPE_PARAFOIL" = 28, "MAV_TYPE_DODECAROTOR" = 29, "MAV_TYPE_CAMERA" = 30, "MAV_TYPE_CHARGING_STATION" = 31, "MAV_TYPE_FLARM" = 32 } type;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_AUTOPILOT_GENERIC" = 0, "MAV_AUTOPILOT_RESERVED" = 1, "MAV_AUTOPILOT_SLUGS" = 2, "MAV_AUTOPILOT_ARDUPILOTMEGA" = 3, "MAV_AUTOPILOT_OPENPILOT" = 4, "MAV_AUTOPILOT_GENERIC_WAYPOINTS_ONLY" = 5, "MAV_AUTOPILOT_GENERIC_WAYPOINTS_AND_SIMPLE_NAVIGATION_ONLY" = 6, "MAV_AUTOPILOT_GENERIC_MISSION_FULL" = 7, "MAV_AUTOPILOT_INVALID" = 8, "MAV_AUTOPILOT_PPZ" = 9, "MAV_AUTOPILOT_UDB" = 10, "MAV_AUTOPILOT_FP" = 11, "MAV_AUTOPILOT_PX4" = 12, "MAV_AUTOPILOT_SMACCMPILOT" = 13, "MAV_AUTOPILOT_AUTOQUAD" = 14, "MAV_AUTOPILOT_ARMAZILA" = 15, "MAV_AUTOPILOT_AEROB" = 16, "MAV_AUTOPILOT_ASLUAV" = 17, "MAV_AUTOPILOT_SMARTAP" = 18, "MAV_AUTOPILOT_AIRRAILS" = 19 } autopilot;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_MODE_FLAG_CUSTOM_MODE_ENABLED" = 1, "MAV_MODE_FLAG_TEST_ENABLED" = 2, "MAV_MODE_FLAG_AUTO_ENABLED" = 4, "MAV_MODE_FLAG_GUIDED_ENABLED" = 8, "MAV_MODE_FLAG_STABILIZE_ENABLED" = 16, "MAV_MODE_FLAG_HIL_ENABLED" = 32, "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED" = 64, "MAV_MODE_FLAG_SAFETY_ARMED" = 128 } base_mode;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } custom_mode;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_STATE_UNINIT" = 0, "MAV_STATE_BOOT" = 1, "MAV_STATE_CALIBRATING" = 2, "MAV_STATE_STANDBY" = 3, "MAV_STATE_ACTIVE" = 4, "MAV_STATE_CRITICAL" = 5, "MAV_STATE_EMERGENCY" = 6, "MAV_STATE_POWEROFF" = 7, "MAV_STATE_FLIGHT_TERMINATION" = 8 } system_status;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } mavlink_version;
	} align(1);
};

event {
	id = 1;
	name = "SYS_STATUS";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_SYS_STATUS_SENSOR_3D_GYRO" = 1, "MAV_SYS_STATUS_SENSOR_3D_ACCEL" = 2, "MAV_SYS_STATUS_SENSOR_3D_MAG" = 4, "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE" = 8, "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE" = 16, "MAV_SYS_STATUS_SENSOR_GPS" = 32, "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW" = 64, "MAV_SYS_STATUS_SENSOR_VISION_POSITION" = 128, "MAV_SYS_STATUS_SENSOR_LASER_POSITION" = 256, "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH" = 512, "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL" = 1024, "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION" = 2048, "MAV_SYS_STATUS_SENSOR_YAW_POSITION" = 4096, "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL" = 8192, "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL" = 16384, "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS" = 32768, "MAV_SYS_STATUS_SENSOR_RC_RECEIVER" = 65536, "MAV_SYS_STATUS_SENSOR_3D_GYRO2" = 131072, "MAV_SYS_STATUS_SENSOR_3D_ACCEL2" = 262144, "MAV_SYS_STATUS_SENSOR_3D_MAG2" = 524288, "MAV_SYS_STATUS_GEOFENCE" = 1048576, "MAV_SYS_STATUS_AHRS" = 2097152, "MAV_SYS_STATUS_TERRAIN" = 4194304, "MAV_SYS_STATUS_REVERSE_MOTOR" = 8388608, "MAV_SYS_STATUS_LOGGING" = 16777216, "MAV_SYS_STATUS_SENSOR_BATTERY" = 33554432, "MAV_SYS_STATUS_SENSOR_PROXIMITY" = 67108864 } onboard_control_sensors_present;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_SYS_STATUS_SENSOR_3D_GYRO" = 1, "MAV_SYS_STATUS_SENSOR_3D_ACCEL" = 2, "MAV_SYS_STATUS_SENSOR_3D_MAG" = 4, "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE" = 8, "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE" = 16, "MAV_SYS_STATUS_SENSOR_GPS" = 32, "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW" = 64, "MAV_SYS_STATUS_SENSOR_VISION_POSITION" = 128, "MAV_SYS_STATUS_SENSOR_LASER_POSITION" = 256, "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH" = 512, "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL" = 1024, "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION" = 2048, "MAV_SYS_STATUS_SENSOR_YAW_POSITION" = 4096, "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL" = 8192, "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL" = 16384, "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS" = 32768, "MAV_SYS_STATUS_SENSOR_RC_RECEIVER" = 65536, "MAV_SYS_STATUS_SENSOR_3D_GYRO2" = 131072, "MAV_SYS_STATUS_SENSOR_3D_ACCEL2" = 262144, "MAV_SYS_STATUS_SENSOR_3D_MAG2" = 524288, "MAV_SYS_STATUS_GEOFENCE" = 1048576, "MAV_SYS_STATUS_AHRS" = 2097152, "MAV_SYS_STATUS_TERRAIN" = 4194304, "MAV_SYS_STATUS_REVERSE_MOTOR" = 8388608, "MAV_SYS_STATUS_LOGGING" = 16777216, "MAV_SYS_STATUS_SENSOR_BATTERY" = 33554432, "MAV_SYS_STATUS_SENSOR_PROXIMITY" = 67108864 } onboard_control_sensors_enabled;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_SYS_STATUS_SENSOR_3D_GYRO" = 1, "MAV_SYS_STATUS_SENSOR_3D_ACCEL" = 2, "MAV_SYS_STATUS_SENSOR_3D_MAG" = 4, "MAV_SYS_STATUS_SENSOR_ABSOLUTE_PRESSURE" = 8, "MAV_SYS_STATUS_SENSOR_DIFFERENTIAL_PRESSURE" = 16, "MAV_SYS_STATUS_SENSOR_GPS" = 32, "MAV_SYS_STATUS_SENSOR_OPTICAL_FLOW" = 64, "MAV_SYS_STATUS_SENSOR_VISION_POSITION" = 128, "MAV_SYS_STATUS_SENSOR_LASER_POSITION" = 256, "MAV_SYS_STATUS_SENSOR_EXTERNAL_GROUND_TRUTH" = 512, "MAV_SYS_STATUS_SENSOR_ANGULAR_RATE_CONTROL" = 1024, "MAV_SYS_STATUS_SENSOR_ATTITUDE_STABILIZATION" = 2048, "MAV_SYS_STATUS_SENSOR_YAW_POSITION" = 4096, "MAV_SYS_STATUS_SENSOR_Z_ALTITUDE_CONTROL" = 8192, "MAV_SYS_STATUS_SENSOR_XY_POSITION_CONTROL" = 16384, "MAV_SYS_STATUS_SENSOR_MOTOR_OUTPUTS" = 32768, "MAV_SYS_STATUS_SENSOR_RC_RECEIVER" = 65536, "MAV_SYS_STATUS_SENSOR_3D_GYRO2" = 131072, "MAV_SYS_STATUS_SENSOR_3D_ACCEL2" = 262144, "MAV_SYS_STATUS_SENSOR_3D_MAG2" = 524288, "MAV_SYS_STATUS_GEOFENCE" = 1048576, "MAV_SYS_STATUS_AHRS" = 2097152, "MAV_SYS_STATUS_TERRAIN" = 4194304, "MAV_SYS_STATUS_REVERSE_MOTOR" = 8388608, "MAV_SYS_STATUS_LOGGING" = 16777216, "MAV_SYS_STATUS_SENSOR_BATTERY" = 33554432, "MAV_SYS_STATUS_SENSOR_PROXIMITY" = 67108864 } onboard_control_sensors_health;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } load;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } voltage_battery;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } current_battery;
		integer { size = 8; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } battery_remaining;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } drop_rate_comm;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } errors_comm;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } errors_count1;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } errors_count2;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } errors_count3;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } errors_count4;
	} align(1);
};

event {
	id = 2;
	name = "SYSTEM_TIME";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_unix_usec;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
	} align(1);
};

event {
	id = 3;
	name = "PING";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seq;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
	} align(1);
};

event {
	id = 4;
	name = "CHANGE_OPERATOR_CONTROL";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } control_request;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } version;
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } passkey[25];
	} align(1);
};

event {
	id = 5;
	name = "CHANGE_OPERATOR_CONTROL_ACK";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } gcs_system_id;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } control_request;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } ack;
	} align(1);
};

event {
	id = 6;
	name = "AUTH_KEY";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } key[32];
	} align(1);
};

event {
	id = 7;
	name = "SET_MODE";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_MODE_PREFLIGHT" = 0, "MAV_MODE_MANUAL_DISARMED" = 64, "MAV_MODE_TEST_DISARMED" = 66, "MAV_MODE_STABILIZE_DISARMED" = 80, "MAV_MODE_GUIDED_DISARMED" = 88, "MAV_MODE_AUTO_DISARMED" = 92, "MAV_MODE_MANUAL_ARMED" = 192, "MAV_MODE_TEST_ARMED" = 194, "MAV_MODE_STABILIZE_ARMED" = 208, "MAV_MODE_GUIDED_ARMED" = 216, "MAV_MODE_AUTO_ARMED" = 220 } base_mode;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } custom_mode;
	} align(1);
};

event {
	id = 8;
	name = "PARAM_REQUEST_READ";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } param_id[16];
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } param_index;
	} align(1);
};

event {
	id = 9;
	name = "PARAM_REQUEST_LIST";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
	} align(1);
};

event {
	id = 10;
	name = "PARAM_VALUE";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } param_id[16];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param_value;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_PARAM_TYPE_UINT8" = 1, "MAV_PARAM_TYPE_INT8" = 2, "MAV_PARAM_TYPE_UINT16" = 3, "MAV_PARAM_TYPE_INT16" = 4, "MAV_PARAM_TYPE_UINT32" = 5, "MAV_PARAM_TYPE_INT32" = 6, "MAV_PARAM_TYPE_UINT64" = 7, "MAV_PARAM_TYPE_INT64" = 8, "MAV_PARAM_TYPE_REAL32" = 9, "MAV_PARAM_TYPE_REAL64" = 10 } param_type;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } param_count;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } param_index;
	} align(1);
};

event {
	id = 11;
	name = "PARAM_SET";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } param_id[16];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param_value;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_PARAM_TYPE_UINT8" = 1, "MAV_PARAM_TYPE_INT8" = 2, "MAV_PARAM_TYPE_UINT16" = 3, "MAV_PARAM_TYPE_INT16" = 4, "MAV_PARAM_TYPE_UINT32" = 5, "MAV_PARAM_TYPE_INT32" = 6, "MAV_PARAM_TYPE_UINT64" = 7, "MAV_PARAM_TYPE_INT64" = 8, "MAV_PARAM_TYPE_REAL32" = 9, "MAV_PARAM_TYPE_REAL64" = 10 } param_type;
	} align(1);
};

event {
	id = 12;
	name = "GPS_RAW_INT";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GPS_FIX_TYPE_NO_GPS" = 0, "GPS_FIX_TYPE_NO_FIX" = 1, "GPS_FIX_TYPE_2D_FIX" = 2, "GPS_FIX_TYPE_3D_FIX" = 3, "GPS_FIX_TYPE_DGPS" = 4, "GPS_FIX_TYPE_RTK_FLOAT" = 5, "GPS_FIX_TYPE_RTK_FIXED" = 6, "GPS_FIX_TYPE_STATIC" = 7, "GPS_FIX_TYPE_PPP" = 8 } fix_type;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } alt;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } eph;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } epv;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } vel;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } cog;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } satellites_visible;
	} align(1);
};

event {
	id = 13;
	name = "GPS_STATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } satellites_visible;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } satellite_prn[20];
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } satellite_used[20];
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } satellite_elevation[20];
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } satellite_azimuth[20];
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } satellite_snr[20];
	} align(1);
};

event {
	id = 14;
	name = "SCALED_IMU";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } yacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xgyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ygyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zgyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xmag;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ymag;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zmag;
	} align(1);
};

event {
	id = 15;
	name = "RAW_IMU";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } yacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xgyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ygyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zgyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xmag;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ymag;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zmag;
	} align(1);
};

event {
	id = 16;
	name = "RAW_PRESSURE";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } press_abs;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } press_diff1;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } press_diff2;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } temperature;
	} align(1);
};

event {
	id = 17;
	name = "SCALED_PRESSURE";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } press_abs;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } press_diff;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } temperature;
	} align(1);
};

event {
	id = 18;
	name = "ATTITUDE";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } rollspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitchspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yawspeed;
	} align(1);
};

event {
	id = 19;
	name = "ATTITUDE_QUATERNION";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q1;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q2;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q3;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q4;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } rollspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitchspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yawspeed;
	} align(1);
};

event {
	id = 20;
	name = "LOCAL_POSITION_NED";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vz;
	} align(1);
};

event {
	id = 21;
	name = "GLOBAL_POSITION_INT";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } alt;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } relative_alt;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vx;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vy;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vz;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } hdg;
	} align(1);
};

event {
	id = 22;
	name = "RC_CHANNELS_SCALED";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } port;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } chan1_scaled;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } chan2_scaled;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } chan3_scaled;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } chan4_scaled;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } chan5_scaled;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } chan6_scaled;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } chan7_scaled;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } chan8_scaled;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rssi;
	} align(1);
};

event {
	id = 23;
	name = "RC_CHANNELS_RAW";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } port;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan1_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan2_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan3_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan4_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan5_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan6_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan7_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan8_raw;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rssi;
	} align(1);
};

event {
	id = 24;
	name = "SERVO_OUTPUT_RAW";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } port;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } servo1_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } servo2_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } servo3_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } servo4_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } servo5_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } servo6_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } servo7_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } servo8_raw;
	} align(1);
};

event {
	id = 25;
	name = "MISSION_REQUEST_PARTIAL_LIST";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } start_index;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } end_index;
	} align(1);
};

event {
	id = 26;
	name = "MISSION_WRITE_PARTIAL_LIST";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } start_index;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } end_index;
	} align(1);
};

event {
	id = 27;
	name = "MISSION_ITEM";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seq;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_FRAME_GLOBAL" = 0, "MAV_FRAME_LOCAL_NED" = 1, "MAV_FRAME_MISSION" = 2, "MAV_FRAME_GLOBAL_RELATIVE_ALT" = 3, "MAV_FRAME_LOCAL_ENU" = 4, "MAV_FRAME_GLOBAL_INT" = 5, "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT" = 6, "MAV_FRAME_LOCAL_OFFSET_NED" = 7, "MAV_FRAME_BODY_NED" = 8, "MAV_FRAME_BODY_OFFSET_NED" = 9, "MAV_FRAME_GLOBAL_TERRAIN_ALT" = 10, "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT" = 11, "MAV_FRAME_BODY_FRD" = 12, "MAV_FRAME_BODY_FLU" = 13, "MAV_FRAME_MOCAP_NED" = 14, "MAV_FRAME_MOCAP_ENU" = 15, "MAV_FRAME_VISION_NED" = 16, "MAV_FRAME_VISION_ENU" = 17, "MAV_FRAME_ESTIM_NED" = 18, "MAV_FRAME_ESTIM_ENU" = 19 } frame;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_CMD_NAV_WAYPOINT" = 16, "MAV_CMD_NAV_LOITER_UNLIM" = 17, "MAV_CMD_NAV_LOITER_TURNS" = 18, "MAV_CMD_NAV_LOITER_TIME" = 19, "MAV_CMD_NAV_RETURN_TO_LAUNCH" = 20, "MAV_CMD_NAV_LAND" = 21, "MAV_CMD_NAV_TAKEOFF" = 22, "MAV_CMD_NAV_LAND_LOCAL" = 23, "MAV_CMD_NAV_TAKEOFF_LOCAL" = 24, "MAV_CMD_NAV_FOLLOW" = 25, "MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT" = 30, "MAV_CMD_NAV_LOITER_TO_ALT" = 31, "MAV_CMD_DO_FOLLOW" = 32, "MAV_CMD_DO_FOLLOW_REPOSITION" = 33, "MAV_CMD_NAV_ROI" = 80, "MAV_CMD_NAV_PATHPLANNING" = 81, "MAV_CMD_NAV_SPLINE_WAYPOINT" = 82, "MAV_CMD_NAV_VTOL_TAKEOFF" = 84, "MAV_CMD_NAV_VTOL_LAND" = 85, "MAV_CMD_NAV_GUIDED_ENABLE" = 92, "MAV_CMD_NAV_DELAY" = 93, "MAV_CMD_NAV_PAYLOAD_PLACE" = 94, "MAV_CMD_NAV_LAST" = 95, "MAV_CMD_CONDITION_DELAY" = 112, "MAV_CMD_CONDITION_CHANGE_ALT" = 113, "MAV_CMD_CONDITION_DISTANCE" = 114, "MAV_CMD_CONDITION_YAW" = 115, "MAV_CMD_CONDITION_LAST" = 159, "MAV_CMD_DO_SET_MODE" = 176, "MAV_CMD_DO_JUMP" = 177, "MAV_CMD_DO_CHANGE_SPEED" = 178, "MAV_CMD_DO_SET_HOME" = 179, "MAV_CMD_DO_SET_PARAMETER" = 180, "MAV_CMD_DO_SET_RELAY" = 181, "MAV_CMD_DO_REPEAT_RELAY" = 182, "MAV_CMD_DO_SET_SERVO" = 183, "MAV_CMD_DO_REPEAT_SERVO" = 184, "MAV_CMD_DO_FLIGHTTERMINATION" = 185, "MAV_CMD_DO_CHANGE_ALTITUDE" = 186, "MAV_CMD_DO_LAND_START" = 189, "MAV_CMD_DO_RALLY_LAND" = 190, "MAV_CMD_DO_GO_AROUND" = 191, "MAV_CMD_DO_REPOSITION" = 192, "MAV_CMD_DO_PAUSE_CONTINUE" = 193, "MAV_CMD_DO_SET_REVERSE" = 194, "MAV_CMD_DO_SET_ROI_LOCATION" = 195, "MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET" = 196, "MAV_CMD_DO_SET_ROI_NONE" = 197, "MAV_CMD_DO_CONTROL_VIDEO" = 200, "MAV_CMD_DO_SET_ROI" = 201, "MAV_CMD_DO_DIGICAM_CONFIGURE" = 202, "MAV_CMD_DO_DIGICAM_CONTROL" = 203, "MAV_CMD_DO_MOUNT_CONFIGURE" = 204, "MAV_CMD_DO_MOUNT_CONTROL" = 205, "MAV_CMD_DO_SET_CAM_TRIGG_DIST" = 206, "MAV_CMD_DO_FENCE_ENABLE" = 207, "MAV_CMD_DO_PARACHUTE" = 208, "MAV_CMD_DO_MOTOR_TEST" = 209, "MAV_CMD_DO_INVERTED_FLIGHT" = 210, "MAV_CMD_NAV_SET_YAW_SPEED" = 213, "MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL" = 214, "MAV_CMD_DO_MOUNT_CONTROL_QUAT" = 220, "MAV_CMD_DO_GUIDED_MASTER" = 221, "MAV_CMD_DO_GUIDED_LIMITS" = 222, "MAV_CMD_DO_ENGINE_CONTROL" = 223, "MAV_CMD_DO_LAST" = 240, "MAV_CMD_PREFLIGHT_CALIBRATION" = 241, "MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS" = 242, "MAV_CMD_PREFLIGHT_UAVCAN" = 243, "MAV_CMD_PREFLIGHT_STORAGE" = 245, "MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN" = 246, "MAV_CMD_OVERRIDE_GOTO" = 252, "MAV_CMD_MISSION_START" = 300, "MAV_CMD_COMPONENT_ARM_DISARM" = 400, "MAV_CMD_GET_HOME_POSITION" = 410, "MAV_CMD_START_RX_PAIR" = 500, "MAV_CMD_GET_MESSAGE_INTERVAL" = 510, "MAV_CMD_SET_MESSAGE_INTERVAL" = 511, "MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES" = 520, "MAV_CMD_REQUEST_CAMERA_INFORMATION" = 521, "MAV_CMD_REQUEST_CAMERA_SETTINGS" = 522, "MAV_CMD_SET_CAMERA_SETTINGS_1" = 523, "MAV_CMD_SET_CAMERA_SETTINGS_2" = 524, "MAV_CMD_REQUEST_STORAGE_INFORMATION" = 525, "MAV_CMD_STORAGE_FORMAT" = 526, "MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS" = 527, "MAV_CMD_REQUEST_FLIGHT_INFORMATION" = 528, "MAV_CMD_SET_CAMERA_MODE" = 530, "MAV_CMD_IMAGE_START_CAPTURE" = 2000, "MAV_CMD_IMAGE_STOP_CAPTURE" = 2001, "MAV_CMD_DO_TRIGGER_CONTROL" = 2003, "MAV_CMD_VIDEO_START_CAPTURE" = 2500, "MAV_CMD_VIDEO_STOP_CAPTURE" = 2501, "MAV_CMD_LOGGING_START" = 2510, "MAV_CMD_LOGGING_STOP" = 2511, "MAV_CMD_AIRFRAME_CONFIGURATION" = 2520, "MAV_CMD_CONTROL_HIGH_LATENCY" = 2600, "MAV_CMD_PANORAMA_CREATE" = 2800, "MAV_CMD_DO_VTOL_TRANSITION" = 3000, "MAV_CMD_ARM_AUTHORIZATION_REQUEST" = 3001, "MAV_CMD_SET_GUIDED_SUBMODE_STANDARD" = 4000, "MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE" = 4001, "MAV_CMD_NAV_FENCE_RETURN_POINT" = 5000, "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION" = 5001, "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION" = 5002, "MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION" = 5003, "MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION" = 5004, "MAV_CMD_NAV_RALLY_POINT" = 5100, "MAV_CMD_UAVCAN_GET_NODE_INFO" = 5200, "MAV_CMD_PAYLOAD_PREPARE_DEPLOY" = 30001, "MAV_CMD_PAYLOAD_CONTROL_DEPLOY" = 30002, "MAV_CMD_WAYPOINT_USER_1" = 31000, "MAV_CMD_WAYPOINT_USER_2" = 31001, "MAV_CMD_WAYPOINT_USER_3" = 31002, "MAV_CMD_WAYPOINT_USER_4" = 31003, "MAV_CMD_WAYPOINT_USER_5" = 31004, "MAV_CMD_SPATIAL_USER_1" = 31005, "MAV_CMD_SPATIAL_USER_2" = 31006, "MAV_CMD_SPATIAL_USER_3" = 31007, "MAV_CMD_SPATIAL_USER_4" = 31008, "MAV_CMD_SPATIAL_USER_5" = 31009, "MAV_CMD_USER_1" = 31010, "MAV_CMD_USER_2" = 31011, "MAV_CMD_USER_3" = 31012, "MAV_CMD_USER_4" = 31013, "MAV_CMD_USER_5" = 31014 } command;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } current;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } autocontinue;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param1;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param2;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param3;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param4;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
	} align(1);
};

event {
	id = 28;
	name = "MISSION_REQUEST";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seq;
	} align(1);
};

event {
	id = 29;
	name = "MISSION_SET_CURRENT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seq;
	} align(1);
};

event {
	id = 30;
	name = "MISSION_CURRENT";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seq;
	} align(1);
};

event {
	id = 31;
	name = "MISSION_REQUEST_LIST";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
	} align(1);
};

event {
	id = 32;
	name = "MISSION_COUNT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } count;
	} align(1);
};

event {
	id = 33;
	name = "MISSION_CLEAR_ALL";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
	} align(1);
};

event {
	id = 34;
	name = "MISSION_ITEM_REACHED";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seq;
	} align(1);
};

event {
	id = 35;
	name = "MISSION_ACK";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_MISSION_ACCEPTED" = 0, "MAV_MISSION_ERROR" = 1, "MAV_MISSION_UNSUPPORTED_FRAME" = 2, "MAV_MISSION_UNSUPPORTED" = 3, "MAV_MISSION_NO_SPACE" = 4, "MAV_MISSION_INVALID" = 5, "MAV_MISSION_INVALID_PARAM1" = 6, "MAV_MISSION_INVALID_PARAM2" = 7, "MAV_MISSION_INVALID_PARAM3" = 8, "MAV_MISSION_INVALID_PARAM4" = 9, "MAV_MISSION_INVALID_PARAM5_X" = 10, "MAV_MISSION_INVALID_PARAM6_Y" = 11, "MAV_MISSION_INVALID_PARAM7" = 12, "MAV_MISSION_INVALID_SEQUENCE" = 13, "MAV_MISSION_DENIED" = 14 } type;
	} align(1);
};

event {
	id = 36;
	name = "SET_GPS_GLOBAL_ORIGIN";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } latitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } longitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } altitude;
	} align(1);
};

event {
	id = 37;
	name = "GPS_GLOBAL_ORIGIN";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } latitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } longitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } altitude;
	} align(1);
};

event {
	id = 38;
	name = "PARAM_MAP_RC";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } param_id[16];
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } param_index;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } parameter_rc_channel_index;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param_value0;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } scale;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param_value_min;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param_value_max;
	} align(1);
};

event {
	id = 39;
	name = "MISSION_REQUEST_INT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seq;
	} align(1);
};

event {
	id = 40;
	name = "SAFETY_SET_ALLOWED_AREA";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_FRAME_GLOBAL" = 0, "MAV_FRAME_LOCAL_NED" = 1, "MAV_FRAME_MISSION" = 2, "MAV_FRAME_GLOBAL_RELATIVE_ALT" = 3, "MAV_FRAME_LOCAL_ENU" = 4, "MAV_FRAME_GLOBAL_INT" = 5, "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT" = 6, "MAV_FRAME_LOCAL_OFFSET_NED" = 7, "MAV_FRAME_BODY_NED" = 8, "MAV_FRAME_BODY_OFFSET_NED" = 9, "MAV_FRAME_GLOBAL_TERRAIN_ALT" = 10, "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT" = 11, "MAV_FRAME_BODY_FRD" = 12, "MAV_FRAME_BODY_FLU" = 13, "MAV_FRAME_MOCAP_NED" = 14, "MAV_FRAME_MOCAP_ENU" = 15, "MAV_FRAME_VISION_NED" = 16, "MAV_FRAME_VISION_ENU" = 17, "MAV_FRAME_ESTIM_NED" = 18, "MAV_FRAME_ESTIM_ENU" = 19 } frame;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p1x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p1y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p1z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p2x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p2y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p2z;
	} align(1);
};

event {
	id = 41;
	name = "SAFETY_ALLOWED_AREA";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_FRAME_GLOBAL" = 0, "MAV_FRAME_LOCAL_NED" = 1, "MAV_FRAME_MISSION" = 2, "MAV_FRAME_GLOBAL_RELATIVE_ALT" = 3, "MAV_FRAME_LOCAL_ENU" = 4, "MAV_FRAME_GLOBAL_INT" = 5, "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT" = 6, "MAV_FRAME_LOCAL_OFFSET_NED" = 7, "MAV_FRAME_BODY_NED" = 8, "MAV_FRAME_BODY_OFFSET_NED" = 9, "MAV_FRAME_GLOBAL_TERRAIN_ALT" = 10, "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT" = 11, "MAV_FRAME_BODY_FRD" = 12, "MAV_FRAME_BODY_FLU" = 13, "MAV_FRAME_MOCAP_NED" = 14, "MAV_FRAME_MOCAP_ENU" = 15, "MAV_FRAME_VISION_NED" = 16, "MAV_FRAME_VISION_ENU" = 17, "MAV_FRAME_ESTIM_NED" = 18, "MAV_FRAME_ESTIM_ENU" = 19 } frame;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p1x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p1y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p1z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p2x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p2y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p2z;
	} align(1);
};

event {
	id = 42;
	name = "ATTITUDE_QUATERNION_COV";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q[4];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } rollspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitchspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yawspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } covariance[9];
	} align(1);
};

event {
	id = 43;
	name = "NAV_CONTROLLER_OUTPUT";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } nav_roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } nav_pitch;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } nav_bearing;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } target_bearing;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } wp_dist;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } alt_error;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } aspd_error;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xtrack_error;
	} align(1);
};

event {
	id = 44;
	name = "GLOBAL_POSITION_INT_COV";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_ESTIMATOR_TYPE_NAIVE" = 1, "MAV_ESTIMATOR_TYPE_VISION" = 2, "MAV_ESTIMATOR_TYPE_VIO" = 3, "MAV_ESTIMATOR_TYPE_GPS" = 4, "MAV_ESTIMATOR_TYPE_GPS_INS" = 5 } estimator_type;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } alt;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } relative_alt;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } covariance[36];
	} align(1);
};

event {
	id = 45;
	name = "LOCAL_POSITION_NED_COV";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_ESTIMATOR_TYPE_NAIVE" = 1, "MAV_ESTIMATOR_TYPE_VISION" = 2, "MAV_ESTIMATOR_TYPE_VIO" = 3, "MAV_ESTIMATOR_TYPE_GPS" = 4, "MAV_ESTIMATOR_TYPE_GPS_INS" = 5 } estimator_type;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ax;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ay;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } az;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } covariance[45];
	} align(1);
};

event {
	id = 46;
	name = "RC_CHANNELS";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chancount;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan1_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan2_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan3_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan4_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan5_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan6_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan7_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan8_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan9_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan10_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan11_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan12_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan13_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan14_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan15_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan16_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan17_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan18_raw;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rssi;
	} align(1);
};

event {
	id = 47;
	name = "REQUEST_DATA_STREAM";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } req_stream_id;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } req_message_rate;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } start_stop;
	} align(1);
};

event {
	id = 48;
	name = "DATA_STREAM";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } stream_id;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } message_rate;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } on_off;
	} align(1);
};

event {
	id = 49;
	name = "MANUAL_CONTROL";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } x;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } y;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } z;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } r;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } buttons;
	} align(1);
};

event {
	id = 50;
	name = "RC_CHANNELS_OVERRIDE";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan1_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan2_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan3_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan4_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan5_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan6_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan7_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan8_raw;
	} align(1);
};

event {
	id = 51;
	name = "MISSION_ITEM_INT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seq;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_FRAME_GLOBAL" = 0, "MAV_FRAME_LOCAL_NED" = 1, "MAV_FRAME_MISSION" = 2, "MAV_FRAME_GLOBAL_RELATIVE_ALT" = 3, "MAV_FRAME_LOCAL_ENU" = 4, "MAV_FRAME_GLOBAL_INT" = 5, "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT" = 6, "MAV_FRAME_LOCAL_OFFSET_NED" = 7, "MAV_FRAME_BODY_NED" = 8, "MAV_FRAME_BODY_OFFSET_NED" = 9, "MAV_FRAME_GLOBAL_TERRAIN_ALT" = 10, "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT" = 11, "MAV_FRAME_BODY_FRD" = 12, "MAV_FRAME_BODY_FLU" = 13, "MAV_FRAME_MOCAP_NED" = 14, "MAV_FRAME_MOCAP_ENU" = 15, "MAV_FRAME_VISION_NED" = 16, "MAV_FRAME_VISION_ENU" = 17, "MAV_FRAME_ESTIM_NED" = 18, "MAV_FRAME_ESTIM_ENU" = 19 } frame;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_CMD_NAV_WAYPOINT" = 16, "MAV_CMD_NAV_LOITER_UNLIM" = 17, "MAV_CMD_NAV_LOITER_TURNS" = 18, "MAV_CMD_NAV_LOITER_TIME" = 19, "MAV_CMD_NAV_RETURN_TO_LAUNCH" = 20, "MAV_CMD_NAV_LAND" = 21, "MAV_CMD_NAV_TAKEOFF" = 22, "MAV_CMD_NAV_LAND_LOCAL" = 23, "MAV_CMD_NAV_TAKEOFF_LOCAL" = 24, "MAV_CMD_NAV_FOLLOW" = 25, "MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT" = 30, "MAV_CMD_NAV_LOITER_TO_ALT" = 31, "MAV_CMD_DO_FOLLOW" = 32, "MAV_CMD_DO_FOLLOW_REPOSITION" = 33, "MAV_CMD_NAV_ROI" = 80, "MAV_CMD_NAV_PATHPLANNING" = 81, "MAV_CMD_NAV_SPLINE_WAYPOINT" = 82, "MAV_CMD_NAV_VTOL_TAKEOFF" = 84, "MAV_CMD_NAV_VTOL_LAND" = 85, "MAV_CMD_NAV_GUIDED_ENABLE" = 92, "MAV_CMD_NAV_DELAY" = 93, "MAV_CMD_NAV_PAYLOAD_PLACE" = 94, "MAV_CMD_NAV_LAST" = 95, "MAV_CMD_CONDITION_DELAY" = 112, "MAV_CMD_CONDITION_CHANGE_ALT" = 113, "MAV_CMD_CONDITION_DISTANCE" = 114, "MAV_CMD_CONDITION_YAW" = 115, "MAV_CMD_CONDITION_LAST" = 159, "MAV_CMD_DO_SET_MODE" = 176, "MAV_CMD_DO_JUMP" = 177, "MAV_CMD_DO_CHANGE_SPEED" = 178, "MAV_CMD_DO_SET_HOME" = 179, "MAV_CMD_DO_SET_PARAMETER" = 180, "MAV_CMD_DO_SET_RELAY" = 181, "MAV_CMD_DO_REPEAT_RELAY" = 182, "MAV_CMD_DO_SET_SERVO" = 183, "MAV_CMD_DO_REPEAT_SERVO" = 184, "MAV_CMD_DO_FLIGHTTERMINATION" = 185, "MAV_CMD_DO_CHANGE_ALTITUDE" = 186, "MAV_CMD_DO_LAND_START" = 189, "MAV_CMD_DO_RALLY_LAND" = 190, "MAV_CMD_DO_GO_AROUND" = 191, "MAV_CMD_DO_REPOSITION" = 192, "MAV_CMD_DO_PAUSE_CONTINUE" = 193, "MAV_CMD_DO_SET_REVERSE" = 194, "MAV_CMD_DO_SET_ROI_LOCATION" = 195, "MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET" = 196, "MAV_CMD_DO_SET_ROI_NONE" = 197, "MAV_CMD_DO_CONTROL_VIDEO" = 200, "MAV_CMD_DO_SET_ROI" = 201, "MAV_CMD_DO_DIGICAM_CONFIGURE" = 202, "MAV_CMD_DO_DIGICAM_CONTROL" = 203, "MAV_CMD_DO_MOUNT_CONFIGURE" = 204, "MAV_CMD_DO_MOUNT_CONTROL" = 205, "MAV_CMD_DO_SET_CAM_TRIGG_DIST" = 206, "MAV_CMD_DO_FENCE_ENABLE" = 207, "MAV_CMD_DO_PARACHUTE" = 208, "MAV_CMD_DO_MOTOR_TEST" = 209, "MAV_CMD_DO_INVERTED_FLIGHT" = 210, "MAV_CMD_NAV_SET_YAW_SPEED" = 213, "MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL" = 214, "MAV_CMD_DO_MOUNT_CONTROL_QUAT" = 220, "MAV_CMD_DO_GUIDED_MASTER" = 221, "MAV_CMD_DO_GUIDED_LIMITS" = 222, "MAV_CMD_DO_ENGINE_CONTROL" = 223, "MAV_CMD_DO_LAST" = 240, "MAV_CMD_PREFLIGHT_CALIBRATION" = 241, "MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS" = 242, "MAV_CMD_PREFLIGHT_UAVCAN" = 243, "MAV_CMD_PREFLIGHT_STORAGE" = 245, "MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN" = 246, "MAV_CMD_OVERRIDE_GOTO" = 252, "MAV_CMD_MISSION_START" = 300, "MAV_CMD_COMPONENT_ARM_DISARM" = 400, "MAV_CMD_GET_HOME_POSITION" = 410, "MAV_CMD_START_RX_PAIR" = 500, "MAV_CMD_GET_MESSAGE_INTERVAL" = 510, "MAV_CMD_SET_MESSAGE_INTERVAL" = 511, "MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES" = 520, "MAV_CMD_REQUEST_CAMERA_INFORMATION" = 521, "MAV_CMD_REQUEST_CAMERA_SETTINGS" = 522, "MAV_CMD_SET_CAMERA_SETTINGS_1" = 523, "MAV_CMD_SET_CAMERA_SETTINGS_2" = 524, "MAV_CMD_REQUEST_STORAGE_INFORMATION" = 525, "MAV_CMD_STORAGE_FORMAT" = 526, "MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS" = 527, "MAV_CMD_REQUEST_FLIGHT_INFORMATION" = 528, "MAV_CMD_SET_CAMERA_MODE" = 530, "MAV_CMD_IMAGE_START_CAPTURE" = 2000, "MAV_CMD_IMAGE_STOP_CAPTURE" = 2001, "MAV_CMD_DO_TRIGGER_CONTROL" = 2003, "MAV_CMD_VIDEO_START_CAPTURE" = 2500, "MAV_CMD_VIDEO_STOP_CAPTURE" = 2501, "MAV_CMD_LOGGING_START" = 2510, "MAV_CMD_LOGGING_STOP" = 2511, "MAV_CMD_AIRFRAME_CONFIGURATION" = 2520, "MAV_CMD_CONTROL_HIGH_LATENCY" = 2600, "MAV_CMD_PANORAMA_CREATE" = 2800, "MAV_CMD_DO_VTOL_TRANSITION" = 3000, "MAV_CMD_ARM_AUTHORIZATION_REQUEST" = 3001, "MAV_CMD_SET_GUIDED_SUBMODE_STANDARD" = 4000, "MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE" = 4001, "MAV_CMD_NAV_FENCE_RETURN_POINT" = 5000, "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION" = 5001, "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION" = 5002, "MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION" = 5003, "MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION" = 5004, "MAV_CMD_NAV_RALLY_POINT" = 5100, "MAV_CMD_UAVCAN_GET_NODE_INFO" = 5200, "MAV_CMD_PAYLOAD_PREPARE_DEPLOY" = 30001, "MAV_CMD_PAYLOAD_CONTROL_DEPLOY" = 30002, "MAV_CMD_WAYPOINT_USER_1" = 31000, "MAV_CMD_WAYPOINT_USER_2" = 31001, "MAV_CMD_WAYPOINT_USER_3" = 31002, "MAV_CMD_WAYPOINT_USER_4" = 31003, "MAV_CMD_WAYPOINT_USER_5" = 31004, "MAV_CMD_SPATIAL_USER_1" = 31005, "MAV_CMD_SPATIAL_USER_2" = 31006, "MAV_CMD_SPATIAL_USER_3" = 31007, "MAV_CMD_SPATIAL_USER_4" = 31008, "MAV_CMD_SPATIAL_USER_5" = 31009, "MAV_CMD_USER_1" = 31010, "MAV_CMD_USER_2" = 31011, "MAV_CMD_USER_3" = 31012, "MAV_CMD_USER_4" = 31013, "MAV_CMD_USER_5" = 31014 } command;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } current;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } autocontinue;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param1;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param2;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param3;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param4;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } x;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
	} align(1);
};

event {
	id = 52;
	name = "VFR_HUD";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } airspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } groundspeed;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } heading;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } throttle;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } alt;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } climb;
	} align(1);
};

event {
	id = 53;
	name = "COMMAND_INT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_FRAME_GLOBAL" = 0, "MAV_FRAME_LOCAL_NED" = 1, "MAV_FRAME_MISSION" = 2, "MAV_FRAME_GLOBAL_RELATIVE_ALT" = 3, "MAV_FRAME_LOCAL_ENU" = 4, "MAV_FRAME_GLOBAL_INT" = 5, "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT" = 6, "MAV_FRAME_LOCAL_OFFSET_NED" = 7, "MAV_FRAME_BODY_NED" = 8, "MAV_FRAME_BODY_OFFSET_NED" = 9, "MAV_FRAME_GLOBAL_TERRAIN_ALT" = 10, "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT" = 11, "MAV_FRAME_BODY_FRD" = 12, "MAV_FRAME_BODY_FLU" = 13, "MAV_FRAME_MOCAP_NED" = 14, "MAV_FRAME_MOCAP_ENU" = 15, "MAV_FRAME_VISION_NED" = 16, "MAV_FRAME_VISION_ENU" = 17, "MAV_FRAME_ESTIM_NED" = 18, "MAV_FRAME_ESTIM_ENU" = 19 } frame;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_CMD_NAV_WAYPOINT" = 16, "MAV_CMD_NAV_LOITER_UNLIM" = 17, "MAV_CMD_NAV_LOITER_TURNS" = 18, "MAV_CMD_NAV_LOITER_TIME" = 19, "MAV_CMD_NAV_RETURN_TO_LAUNCH" = 20, "MAV_CMD_NAV_LAND" = 21, "MAV_CMD_NAV_TAKEOFF" = 22, "MAV_CMD_NAV_LAND_LOCAL" = 23, "MAV_CMD_NAV_TAKEOFF_LOCAL" = 24, "MAV_CMD_NAV_FOLLOW" = 25, "MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT" = 30, "MAV_CMD_NAV_LOITER_TO_ALT" = 31, "MAV_CMD_DO_FOLLOW" = 32, "MAV_CMD_DO_FOLLOW_REPOSITION" = 33, "MAV_CMD_NAV_ROI" = 80, "MAV_CMD_NAV_PATHPLANNING" = 81, "MAV_CMD_NAV_SPLINE_WAYPOINT" = 82, "MAV_CMD_NAV_VTOL_TAKEOFF" = 84, "MAV_CMD_NAV_VTOL_LAND" = 85, "MAV_CMD_NAV_GUIDED_ENABLE" = 92, "MAV_CMD_NAV_DELAY" = 93, "MAV_CMD_NAV_PAYLOAD_PLACE" = 94, "MAV_CMD_NAV_LAST" = 95, "MAV_CMD_CONDITION_DELAY" = 112, "MAV_CMD_CONDITION_CHANGE_ALT" = 113, "MAV_CMD_CONDITION_DISTANCE" = 114, "MAV_CMD_CONDITION_YAW" = 115, "MAV_CMD_CONDITION_LAST" = 159, "MAV_CMD_DO_SET_MODE" = 176, "MAV_CMD_DO_JUMP" = 177, "MAV_CMD_DO_CHANGE_SPEED" = 178, "MAV_CMD_DO_SET_HOME" = 179, "MAV_CMD_DO_SET_PARAMETER" = 180, "MAV_CMD_DO_SET_RELAY" = 181, "MAV_CMD_DO_REPEAT_RELAY" = 182, "MAV_CMD_DO_SET_SERVO" = 183, "MAV_CMD_DO_REPEAT_SERVO" = 184, "MAV_CMD_DO_FLIGHTTERMINATION" = 185, "MAV_CMD_DO_CHANGE_ALTITUDE" = 186, "MAV_CMD_DO_LAND_START" = 189, "MAV_CMD_DO_RALLY_LAND" = 190, "MAV_CMD_DO_GO_AROUND" = 191, "MAV_CMD_DO_REPOSITION" = 192, "MAV_CMD_DO_PAUSE_CONTINUE" = 193, "MAV_CMD_DO_SET_REVERSE" = 194, "MAV_CMD_DO_SET_ROI_LOCATION" = 195, "MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET" = 196, "MAV_CMD_DO_SET_ROI_NONE" = 197, "MAV_CMD_DO_CONTROL_VIDEO" = 200, "MAV_CMD_DO_SET_ROI" = 201, "MAV_CMD_DO_DIGICAM_CONFIGURE" = 202, "MAV_CMD_DO_DIGICAM_CONTROL" = 203, "MAV_CMD_DO_MOUNT_CONFIGURE" = 204, "MAV_CMD_DO_MOUNT_CONTROL" = 205, "MAV_CMD_DO_SET_CAM_TRIGG_DIST" = 206, "MAV_CMD_DO_FENCE_ENABLE" = 207, "MAV_CMD_DO_PARACHUTE" = 208, "MAV_CMD_DO_MOTOR_TEST" = 209, "MAV_CMD_DO_INVERTED_FLIGHT" = 210, "MAV_CMD_NAV_SET_YAW_SPEED" = 213, "MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL" = 214, "MAV_CMD_DO_MOUNT_CONTROL_QUAT" = 220, "MAV_CMD_DO_GUIDED_MASTER" = 221, "MAV_CMD_DO_GUIDED_LIMITS" = 222, "MAV_CMD_DO_ENGINE_CONTROL" = 223, "MAV_CMD_DO_LAST" = 240, "MAV_CMD_PREFLIGHT_CALIBRATION" = 241, "MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS" = 242, "MAV_CMD_PREFLIGHT_UAVCAN" = 243, "MAV_CMD_PREFLIGHT_STORAGE" = 245, "MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN" = 246, "MAV_CMD_OVERRIDE_GOTO" = 252, "MAV_CMD_MISSION_START" = 300, "MAV_CMD_COMPONENT_ARM_DISARM" = 400, "MAV_CMD_GET_HOME_POSITION" = 410, "MAV_CMD_START_RX_PAIR" = 500, "MAV_CMD_GET_MESSAGE_INTERVAL" = 510, "MAV_CMD_SET_MESSAGE_INTERVAL" = 511, "MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES" = 520, "MAV_CMD_REQUEST_CAMERA_INFORMATION" = 521, "MAV_CMD_REQUEST_CAMERA_SETTINGS" = 522, "MAV_CMD_SET_CAMERA_SETTINGS_1" = 523, "MAV_CMD_SET_CAMERA_SETTINGS_2" = 524, "MAV_CMD_REQUEST_STORAGE_INFORMATION" = 525, "MAV_CMD_STORAGE_FORMAT" = 526, "MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS" = 527, "MAV_CMD_REQUEST_FLIGHT_INFORMATION" = 528, "MAV_CMD_SET_CAMERA_MODE" = 530, "MAV_CMD_IMAGE_START_CAPTURE" = 2000, "MAV_CMD_IMAGE_STOP_CAPTURE" = 2001, "MAV_CMD_DO_TRIGGER_CONTROL" = 2003, "MAV_CMD_VIDEO_START_CAPTURE" = 2500, "MAV_CMD_VIDEO_STOP_CAPTURE" = 2501, "MAV_CMD_LOGGING_START" = 2510, "MAV_CMD_LOGGING_STOP" = 2511, "MAV_CMD_AIRFRAME_CONFIGURATION" = 2520, "MAV_CMD_CONTROL_HIGH_LATENCY" = 2600, "MAV_CMD_PANORAMA_CREATE" = 2800, "MAV_CMD_DO_VTOL_TRANSITION" = 3000, "MAV_CMD_ARM_AUTHORIZATION_REQUEST" = 3001, "MAV_CMD_SET_GUIDED_SUBMODE_STANDARD" = 4000, "MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE" = 4001, "MAV_CMD_NAV_FENCE_RETURN_POINT" = 5000, "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION" = 5001, "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION" = 5002, "MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION" = 5003, "MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION" = 5004, "MAV_CMD_NAV_RALLY_POINT" = 5100, "MAV_CMD_UAVCAN_GET_NODE_INFO" = 5200, "MAV_CMD_PAYLOAD_PREPARE_DEPLOY" = 30001, "MAV_CMD_PAYLOAD_CONTROL_DEPLOY" = 30002, "MAV_CMD_WAYPOINT_USER_1" = 31000, "MAV_CMD_WAYPOINT_USER_2" = 31001, "MAV_CMD_WAYPOINT_USER_3" = 31002, "MAV_CMD_WAYPOINT_USER_4" = 31003, "MAV_CMD_WAYPOINT_USER_5" = 31004, "MAV_CMD_SPATIAL_USER_1" = 31005, "MAV_CMD_SPATIAL_USER_2" = 31006, "MAV_CMD_SPATIAL_USER_3" = 31007, "MAV_CMD_SPATIAL_USER_4" = 31008, "MAV_CMD_SPATIAL_USER_5" = 31009, "MAV_CMD_USER_1" = 31010, "MAV_CMD_USER_2" = 31011, "MAV_CMD_USER_3" = 31012, "MAV_CMD_USER_4" = 31013, "MAV_CMD_USER_5" = 31014 } command;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } current;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } autocontinue;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param1;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param2;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param3;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param4;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } x;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
	} align(1);
};

event {
	id = 54;
	name = "COMMAND_LONG";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_CMD_NAV_WAYPOINT" = 16, "MAV_CMD_NAV_LOITER_UNLIM" = 17, "MAV_CMD_NAV_LOITER_TURNS" = 18, "MAV_CMD_NAV_LOITER_TIME" = 19, "MAV_CMD_NAV_RETURN_TO_LAUNCH" = 20, "MAV_CMD_NAV_LAND" = 21, "MAV_CMD_NAV_TAKEOFF" = 22, "MAV_CMD_NAV_LAND_LOCAL" = 23, "MAV_CMD_NAV_TAKEOFF_LOCAL" = 24, "MAV_CMD_NAV_FOLLOW" = 25, "MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT" = 30, "MAV_CMD_NAV_LOITER_TO_ALT" = 31, "MAV_CMD_DO_FOLLOW" = 32, "MAV_CMD_DO_FOLLOW_REPOSITION" = 33, "MAV_CMD_NAV_ROI" = 80, "MAV_CMD_NAV_PATHPLANNING" = 81, "MAV_CMD_NAV_SPLINE_WAYPOINT" = 82, "MAV_CMD_NAV_VTOL_TAKEOFF" = 84, "MAV_CMD_NAV_VTOL_LAND" = 85, "MAV_CMD_NAV_GUIDED_ENABLE" = 92, "MAV_CMD_NAV_DELAY" = 93, "MAV_CMD_NAV_PAYLOAD_PLACE" = 94, "MAV_CMD_NAV_LAST" = 95, "MAV_CMD_CONDITION_DELAY" = 112, "MAV_CMD_CONDITION_CHANGE_ALT" = 113, "MAV_CMD_CONDITION_DISTANCE" = 114, "MAV_CMD_CONDITION_YAW" = 115, "MAV_CMD_CONDITION_LAST" = 159, "MAV_CMD_DO_SET_MODE" = 176, "MAV_CMD_DO_JUMP" = 177, "MAV_CMD_DO_CHANGE_SPEED" = 178, "MAV_CMD_DO_SET_HOME" = 179, "MAV_CMD_DO_SET_PARAMETER" = 180, "MAV_CMD_DO_SET_RELAY" = 181, "MAV_CMD_DO_REPEAT_RELAY" = 182, "MAV_CMD_DO_SET_SERVO" = 183, "MAV_CMD_DO_REPEAT_SERVO" = 184, "MAV_CMD_DO_FLIGHTTERMINATION" = 185, "MAV_CMD_DO_CHANGE_ALTITUDE" = 186, "MAV_CMD_DO_LAND_START" = 189, "MAV_CMD_DO_RALLY_LAND" = 190, "MAV_CMD_DO_GO_AROUND" = 191, "MAV_CMD_DO_REPOSITION" = 192, "MAV_CMD_DO_PAUSE_CONTINUE" = 193, "MAV_CMD_DO_SET_REVERSE" = 194, "MAV_CMD_DO_SET_ROI_LOCATION" = 195, "MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET" = 196, "MAV_CMD_DO_SET_ROI_NONE" = 197, "MAV_CMD_DO_CONTROL_VIDEO" = 200, "MAV_CMD_DO_SET_ROI" = 201, "MAV_CMD_DO_DIGICAM_CONFIGURE" = 202, "MAV_CMD_DO_DIGICAM_CONTROL" = 203, "MAV_CMD_DO_MOUNT_CONFIGURE" = 204, "MAV_CMD_DO_MOUNT_CONTROL" = 205, "MAV_CMD_DO_SET_CAM_TRIGG_DIST" = 206, "MAV_CMD_DO_FENCE_ENABLE" = 207, "MAV_CMD_DO_PARACHUTE" = 208, "MAV_CMD_DO_MOTOR_TEST" = 209, "MAV_CMD_DO_INVERTED_FLIGHT" = 210, "MAV_CMD_NAV_SET_YAW_SPEED" = 213, "MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL" = 214, "MAV_CMD_DO_MOUNT_CONTROL_QUAT" = 220, "MAV_CMD_DO_GUIDED_MASTER" = 221, "MAV_CMD_DO_GUIDED_LIMITS" = 222, "MAV_CMD_DO_ENGINE_CONTROL" = 223, "MAV_CMD_DO_LAST" = 240, "MAV_CMD_PREFLIGHT_CALIBRATION" = 241, "MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS" = 242, "MAV_CMD_PREFLIGHT_UAVCAN" = 243, "MAV_CMD_PREFLIGHT_STORAGE" = 245, "MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN" = 246, "MAV_CMD_OVERRIDE_GOTO" = 252, "MAV_CMD_MISSION_START" = 300, "MAV_CMD_COMPONENT_ARM_DISARM" = 400, "MAV_CMD_GET_HOME_POSITION" = 410, "MAV_CMD_START_RX_PAIR" = 500, "MAV_CMD_GET_MESSAGE_INTERVAL" = 510, "MAV_CMD_SET_MESSAGE_INTERVAL" = 511, "MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES" = 520, "MAV_CMD_REQUEST_CAMERA_INFORMATION" = 521, "MAV_CMD_REQUEST_CAMERA_SETTINGS" = 522, "MAV_CMD_SET_CAMERA_SETTINGS_1" = 523, "MAV_CMD_SET_CAMERA_SETTINGS_2" = 524, "MAV_CMD_REQUEST_STORAGE_INFORMATION" = 525, "MAV_CMD_STORAGE_FORMAT" = 526, "MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS" = 527, "MAV_CMD_REQUEST_FLIGHT_INFORMATION" = 528, "MAV_CMD_SET_CAMERA_MODE" = 530, "MAV_CMD_IMAGE_START_CAPTURE" = 2000, "MAV_CMD_IMAGE_STOP_CAPTURE" = 2001, "MAV_CMD_DO_TRIGGER_CONTROL" = 2003, "MAV_CMD_VIDEO_START_CAPTURE" = 2500, "MAV_CMD_VIDEO_STOP_CAPTURE" = 2501, "MAV_CMD_LOGGING_START" = 2510, "MAV_CMD_LOGGING_STOP" = 2511, "MAV_CMD_AIRFRAME_CONFIGURATION" = 2520, "MAV_CMD_CONTROL_HIGH_LATENCY" = 2600, "MAV_CMD_PANORAMA_CREATE" = 2800, "MAV_CMD_DO_VTOL_TRANSITION" = 3000, "MAV_CMD_ARM_AUTHORIZATION_REQUEST" = 3001, "MAV_CMD_SET_GUIDED_SUBMODE_STANDARD" = 4000, "MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE" = 4001, "MAV_CMD_NAV_FENCE_RETURN_POINT" = 5000, "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION" = 5001, "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION" = 5002, "MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION" = 5003, "MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION" = 5004, "MAV_CMD_NAV_RALLY_POINT" = 5100, "MAV_CMD_UAVCAN_GET_NODE_INFO" = 5200, "MAV_CMD_PAYLOAD_PREPARE_DEPLOY" = 30001, "MAV_CMD_PAYLOAD_CONTROL_DEPLOY" = 30002, "MAV_CMD_WAYPOINT_USER_1" = 31000, "MAV_CMD_WAYPOINT_USER_2" = 31001, "MAV_CMD_WAYPOINT_USER_3" = 31002, "MAV_CMD_WAYPOINT_USER_4" = 31003, "MAV_CMD_WAYPOINT_USER_5" = 31004, "MAV_CMD_SPATIAL_USER_1" = 31005, "MAV_CMD_SPATIAL_USER_2" = 31006, "MAV_CMD_SPATIAL_USER_3" = 31007, "MAV_CMD_SPATIAL_USER_4" = 31008, "MAV_CMD_SPATIAL_USER_5" = 31009, "MAV_CMD_USER_1" = 31010, "MAV_CMD_USER_2" = 31011, "MAV_CMD_USER_3" = 31012, "MAV_CMD_USER_4" = 31013, "MAV_CMD_USER_5" = 31014 } command;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } confirmation;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param1;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param2;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param3;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param4;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param5;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param6;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } param7;
	} align(1);
};

event {
	id = 55;
	name = "COMMAND_ACK";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_CMD_NAV_WAYPOINT" = 16, "MAV_CMD_NAV_LOITER_UNLIM" = 17, "MAV_CMD_NAV_LOITER_TURNS" = 18, "MAV_CMD_NAV_LOITER_TIME" = 19, "MAV_CMD_NAV_RETURN_TO_LAUNCH" = 20, "MAV_CMD_NAV_LAND" = 21, "MAV_CMD_NAV_TAKEOFF" = 22, "MAV_CMD_NAV_LAND_LOCAL" = 23, "MAV_CMD_NAV_TAKEOFF_LOCAL" = 24, "MAV_CMD_NAV_FOLLOW" = 25, "MAV_CMD_NAV_CONTINUE_AND_CHANGE_ALT" = 30, "MAV_CMD_NAV_LOITER_TO_ALT" = 31, "MAV_CMD_DO_FOLLOW" = 32, "MAV_CMD_DO_FOLLOW_REPOSITION" = 33, "MAV_CMD_NAV_ROI" = 80, "MAV_CMD_NAV_PATHPLANNING" = 81, "MAV_CMD_NAV_SPLINE_WAYPOINT" = 82, "MAV_CMD_NAV_VTOL_TAKEOFF" = 84, "MAV_CMD_NAV_VTOL_LAND" = 85, "MAV_CMD_NAV_GUIDED_ENABLE" = 92, "MAV_CMD_NAV_DELAY" = 93, "MAV_CMD_NAV_PAYLOAD_PLACE" = 94, "MAV_CMD_NAV_LAST" = 95, "MAV_CMD_CONDITION_DELAY" = 112, "MAV_CMD_CONDITION_CHANGE_ALT" = 113, "MAV_CMD_CONDITION_DISTANCE" = 114, "MAV_CMD_CONDITION_YAW" = 115, "MAV_CMD_CONDITION_LAST" = 159, "MAV_CMD_DO_SET_MODE" = 176, "MAV_CMD_DO_JUMP" = 177, "MAV_CMD_DO_CHANGE_SPEED" = 178, "MAV_CMD_DO_SET_HOME" = 179, "MAV_CMD_DO_SET_PARAMETER" = 180, "MAV_CMD_DO_SET_RELAY" = 181, "MAV_CMD_DO_REPEAT_RELAY" = 182, "MAV_CMD_DO_SET_SERVO" = 183, "MAV_CMD_DO_REPEAT_SERVO" = 184, "MAV_CMD_DO_FLIGHTTERMINATION" = 185, "MAV_CMD_DO_CHANGE_ALTITUDE" = 186, "MAV_CMD_DO_LAND_START" = 189, "MAV_CMD_DO_RALLY_LAND" = 190, "MAV_CMD_DO_GO_AROUND" = 191, "MAV_CMD_DO_REPOSITION" = 192, "MAV_CMD_DO_PAUSE_CONTINUE" = 193, "MAV_CMD_DO_SET_REVERSE" = 194, "MAV_CMD_DO_SET_ROI_LOCATION" = 195, "MAV_CMD_DO_SET_ROI_WPNEXT_OFFSET" = 196, "MAV_CMD_DO_SET_ROI_NONE" = 197, "MAV_CMD_DO_CONTROL_VIDEO" = 200, "MAV_CMD_DO_SET_ROI" = 201, "MAV_CMD_DO_DIGICAM_CONFIGURE" = 202, "MAV_CMD_DO_DIGICAM_CONTROL" = 203, "MAV_CMD_DO_MOUNT_CONFIGURE" = 204, "MAV_CMD_DO_MOUNT_CONTROL" = 205, "MAV_CMD_DO_SET_CAM_TRIGG_DIST" = 206, "MAV_CMD_DO_FENCE_ENABLE" = 207, "MAV_CMD_DO_PARACHUTE" = 208, "MAV_CMD_DO_MOTOR_TEST" = 209, "MAV_CMD_DO_INVERTED_FLIGHT" = 210, "MAV_CMD_NAV_SET_YAW_SPEED" = 213, "MAV_CMD_DO_SET_CAM_TRIGG_INTERVAL" = 214, "MAV_CMD_DO_MOUNT_CONTROL_QUAT" = 220, "MAV_CMD_DO_GUIDED_MASTER" = 221, "MAV_CMD_DO_GUIDED_LIMITS" = 222, "MAV_CMD_DO_ENGINE_CONTROL" = 223, "MAV_CMD_DO_LAST" = 240, "MAV_CMD_PREFLIGHT_CALIBRATION" = 241, "MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS" = 242, "MAV_CMD_PREFLIGHT_UAVCAN" = 243, "MAV_CMD_PREFLIGHT_STORAGE" = 245, "MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN" = 246, "MAV_CMD_OVERRIDE_GOTO" = 252, "MAV_CMD_MISSION_START" = 300, "MAV_CMD_COMPONENT_ARM_DISARM" = 400, "MAV_CMD_GET_HOME_POSITION" = 410, "MAV_CMD_START_RX_PAIR" = 500, "MAV_CMD_GET_MESSAGE_INTERVAL" = 510, "MAV_CMD_SET_MESSAGE_INTERVAL" = 511, "MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES" = 520, "MAV_CMD_REQUEST_CAMERA_INFORMATION" = 521, "MAV_CMD_REQUEST_CAMERA_SETTINGS" = 522, "MAV_CMD_SET_CAMERA_SETTINGS_1" = 523, "MAV_CMD_SET_CAMERA_SETTINGS_2" = 524, "MAV_CMD_REQUEST_STORAGE_INFORMATION" = 525, "MAV_CMD_STORAGE_FORMAT" = 526, "MAV_CMD_REQUEST_CAMERA_CAPTURE_STATUS" = 527, "MAV_CMD_REQUEST_FLIGHT_INFORMATION" = 528, "MAV_CMD_SET_CAMERA_MODE" = 530, "MAV_CMD_IMAGE_START_CAPTURE" = 2000, "MAV_CMD_IMAGE_STOP_CAPTURE" = 2001, "MAV_CMD_DO_TRIGGER_CONTROL" = 2003, "MAV_CMD_VIDEO_START_CAPTURE" = 2500, "MAV_CMD_VIDEO_STOP_CAPTURE" = 2501, "MAV_CMD_LOGGING_START" = 2510, "MAV_CMD_LOGGING_STOP" = 2511, "MAV_CMD_AIRFRAME_CONFIGURATION" = 2520, "MAV_CMD_CONTROL_HIGH_LATENCY" = 2600, "MAV_CMD_PANORAMA_CREATE" = 2800, "MAV_CMD_DO_VTOL_TRANSITION" = 3000, "MAV_CMD_ARM_AUTHORIZATION_REQUEST" = 3001, "MAV_CMD_SET_GUIDED_SUBMODE_STANDARD" = 4000, "MAV_CMD_SET_GUIDED_SUBMODE_CIRCLE" = 4001, "MAV_CMD_NAV_FENCE_RETURN_POINT" = 5000, "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_INCLUSION" = 5001, "MAV_CMD_NAV_FENCE_POLYGON_VERTEX_EXCLUSION" = 5002, "MAV_CMD_NAV_FENCE_CIRCLE_INCLUSION" = 5003, "MAV_CMD_NAV_FENCE_CIRCLE_EXCLUSION" = 5004, "MAV_CMD_NAV_RALLY_POINT" = 5100, "MAV_CMD_UAVCAN_GET_NODE_INFO" = 5200, "MAV_CMD_PAYLOAD_PREPARE_DEPLOY" = 30001, "MAV_CMD_PAYLOAD_CONTROL_DEPLOY" = 30002, "MAV_CMD_WAYPOINT_USER_1" = 31000, "MAV_CMD_WAYPOINT_USER_2" = 31001, "MAV_CMD_WAYPOINT_USER_3" = 31002, "MAV_CMD_WAYPOINT_USER_4" = 31003, "MAV_CMD_WAYPOINT_USER_5" = 31004, "MAV_CMD_SPATIAL_USER_1" = 31005, "MAV_CMD_SPATIAL_USER_2" = 31006, "MAV_CMD_SPATIAL_USER_3" = 31007, "MAV_CMD_SPATIAL_USER_4" = 31008, "MAV_CMD_SPATIAL_USER_5" = 31009, "MAV_CMD_USER_1" = 31010, "MAV_CMD_USER_2" = 31011, "MAV_CMD_USER_3" = 31012, "MAV_CMD_USER_4" = 31013, "MAV_CMD_USER_5" = 31014 } command;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_RESULT_ACCEPTED" = 0, "MAV_RESULT_TEMPORARILY_REJECTED" = 1, "MAV_RESULT_DENIED" = 2, "MAV_RESULT_UNSUPPORTED" = 3, "MAV_RESULT_FAILED" = 4 } result;
	} align(1);
};

event {
	id = 56;
	name = "MANUAL_SETPOINT";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } thrust;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } mode_switch;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } manual_override_switch;
	} align(1);
};

event {
	id = 57;
	name = "SET_ATTITUDE_TARGET";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type_mask;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q[4];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } body_roll_rate;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } body_pitch_rate;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } body_yaw_rate;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } thrust;
	} align(1);
};

event {
	id = 58;
	name = "ATTITUDE_TARGET";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type_mask;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q[4];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } body_roll_rate;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } body_pitch_rate;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } body_yaw_rate;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } thrust;
	} align(1);
};

event {
	id = 59;
	name = "SET_POSITION_TARGET_LOCAL_NED";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_FRAME_GLOBAL" = 0, "MAV_FRAME_LOCAL_NED" = 1, "MAV_FRAME_MISSION" = 2, "MAV_FRAME_GLOBAL_RELATIVE_ALT" = 3, "MAV_FRAME_LOCAL_ENU" = 4, "MAV_FRAME_GLOBAL_INT" = 5, "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT" = 6, "MAV_FRAME_LOCAL_OFFSET_NED" = 7, "MAV_FRAME_BODY_NED" = 8, "MAV_FRAME_BODY_OFFSET_NED" = 9, "MAV_FRAME_GLOBAL_TERRAIN_ALT" = 10, "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT" = 11, "MAV_FRAME_BODY_FRD" = 12, "MAV_FRAME_BODY_FLU" = 13, "MAV_FRAME_MOCAP_NED" = 14, "MAV_FRAME_MOCAP_ENU" = 15, "MAV_FRAME_VISION_NED" = 16, "MAV_FRAME_VISION_ENU" = 17, "MAV_FRAME_ESTIM_NED" = 18, "MAV_FRAME_ESTIM_ENU" = 19 } coordinate_frame;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type_mask;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw_rate;
	} align(1);
};

event {
	id = 60;
	name = "POSITION_TARGET_LOCAL_NED";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_FRAME_GLOBAL" = 0, "MAV_FRAME_LOCAL_NED" = 1, "MAV_FRAME_MISSION" = 2, "MAV_FRAME_GLOBAL_RELATIVE_ALT" = 3, "MAV_FRAME_LOCAL_ENU" = 4, "MAV_FRAME_GLOBAL_INT" = 5, "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT" = 6, "MAV_FRAME_LOCAL_OFFSET_NED" = 7, "MAV_FRAME_BODY_NED" = 8, "MAV_FRAME_BODY_OFFSET_NED" = 9, "MAV_FRAME_GLOBAL_TERRAIN_ALT" = 10, "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT" = 11, "MAV_FRAME_BODY_FRD" = 12, "MAV_FRAME_BODY_FLU" = 13, "MAV_FRAME_MOCAP_NED" = 14, "MAV_FRAME_MOCAP_ENU" = 15, "MAV_FRAME_VISION_NED" = 16, "MAV_FRAME_VISION_ENU" = 17, "MAV_FRAME_ESTIM_NED" = 18, "MAV_FRAME_ESTIM_ENU" = 19 } coordinate_frame;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type_mask;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw_rate;
	} align(1);
};

event {
	id = 61;
	name = "SET_POSITION_TARGET_GLOBAL_INT";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_FRAME_GLOBAL" = 0, "MAV_FRAME_LOCAL_NED" = 1, "MAV_FRAME_MISSION" = 2, "MAV_FRAME_GLOBAL_RELATIVE_ALT" = 3, "MAV_FRAME_LOCAL_ENU" = 4, "MAV_FRAME_GLOBAL_INT" = 5, "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT" = 6, "MAV_FRAME_LOCAL_OFFSET_NED" = 7, "MAV_FRAME_BODY_NED" = 8, "MAV_FRAME_BODY_OFFSET_NED" = 9, "MAV_FRAME_GLOBAL_TERRAIN_ALT" = 10, "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT" = 11, "MAV_FRAME_BODY_FRD" = 12, "MAV_FRAME_BODY_FLU" = 13, "MAV_FRAME_MOCAP_NED" = 14, "MAV_FRAME_MOCAP_ENU" = 15, "MAV_FRAME_VISION_NED" = 16, "MAV_FRAME_VISION_ENU" = 17, "MAV_FRAME_ESTIM_NED" = 18, "MAV_FRAME_ESTIM_ENU" = 19 } coordinate_frame;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type_mask;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat_int;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon_int;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } alt;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw_rate;
	} align(1);
};

event {
	id = 62;
	name = "POSITION_TARGET_GLOBAL_INT";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_FRAME_GLOBAL" = 0, "MAV_FRAME_LOCAL_NED" = 1, "MAV_FRAME_MISSION" = 2, "MAV_FRAME_GLOBAL_RELATIVE_ALT" = 3, "MAV_FRAME_LOCAL_ENU" = 4, "MAV_FRAME_GLOBAL_INT" = 5, "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT" = 6, "MAV_FRAME_LOCAL_OFFSET_NED" = 7, "MAV_FRAME_BODY_NED" = 8, "MAV_FRAME_BODY_OFFSET_NED" = 9, "MAV_FRAME_GLOBAL_TERRAIN_ALT" = 10, "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT" = 11, "MAV_FRAME_BODY_FRD" = 12, "MAV_FRAME_BODY_FLU" = 13, "MAV_FRAME_MOCAP_NED" = 14, "MAV_FRAME_MOCAP_ENU" = 15, "MAV_FRAME_VISION_NED" = 16, "MAV_FRAME_VISION_ENU" = 17, "MAV_FRAME_ESTIM_NED" = 18, "MAV_FRAME_ESTIM_ENU" = 19 } coordinate_frame;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type_mask;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat_int;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon_int;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } alt;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } afz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw_rate;
	} align(1);
};

event {
	id = 63;
	name = "LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
	} align(1);
};

event {
	id = 64;
	name = "HIL_STATE";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } rollspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitchspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yawspeed;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } alt;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vx;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vy;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vz;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } yacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zacc;
	} align(1);
};

event {
	id = 65;
	name = "HIL_CONTROLS";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll_ailerons;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch_elevator;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw_rudder;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } throttle;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } aux1;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } aux2;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } aux3;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } aux4;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_MODE_PREFLIGHT" = 0, "MAV_MODE_MANUAL_DISARMED" = 64, "MAV_MODE_TEST_DISARMED" = 66, "MAV_MODE_STABILIZE_DISARMED" = 80, "MAV_MODE_GUIDED_DISARMED" = 88, "MAV_MODE_AUTO_DISARMED" = 92, "MAV_MODE_MANUAL_ARMED" = 192, "MAV_MODE_TEST_ARMED" = 194, "MAV_MODE_STABILIZE_ARMED" = 208, "MAV_MODE_GUIDED_ARMED" = 216, "MAV_MODE_AUTO_ARMED" = 220 } mode;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } nav_mode;
	} align(1);
};

event {
	id = 66;
	name = "HIL_RC_INPUTS_RAW";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan1_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan2_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan3_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan4_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan5_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan6_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan7_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan8_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan9_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan10_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan11_raw;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } chan12_raw;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rssi;
	} align(1);
};

event {
	id = 67;
	name = "HIL_ACTUATOR_CONTROLS";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } controls[16];
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_MODE_PREFLIGHT" = 0, "MAV_MODE_MANUAL_DISARMED" = 64, "MAV_MODE_TEST_DISARMED" = 66, "MAV_MODE_STABILIZE_DISARMED" = 80, "MAV_MODE_GUIDED_DISARMED" = 88, "MAV_MODE_AUTO_DISARMED" = 92, "MAV_MODE_MANUAL_ARMED" = 192, "MAV_MODE_TEST_ARMED" = 194, "MAV_MODE_STABILIZE_ARMED" = 208, "MAV_MODE_GUIDED_ARMED" = 216, "MAV_MODE_AUTO_ARMED" = 220 } mode;
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } flags;
	} align(1);
};

event {
	id = 68;
	name = "OPTICAL_FLOW";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } sensor_id;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } flow_x;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } flow_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } flow_comp_m_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } flow_comp_m_y;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } quality;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ground_distance;
	} align(1);
};

event {
	id = 69;
	name = "GLOBAL_VISION_POSITION_ESTIMATE";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
	} align(1);
};

event {
	id = 70;
	name = "VISION_POSITION_ESTIMATE";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
	} align(1);
};

event {
	id = 71;
	name = "VISION_SPEED_ESTIMATE";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
	} align(1);
};

event {
	id = 72;
	name = "VICON_POSITION_ESTIMATE";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
	} align(1);
};

event {
	id = 73;
	name = "HIGHRES_IMU";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } zacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xgyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ygyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } zgyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xmag;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ymag;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } zmag;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } abs_pressure;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } diff_pressure;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pressure_alt;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } temperature;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } fields_updated;
	} align(1);
};

event {
	id = 74;
	name = "OPTICAL_FLOW_RAD";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } sensor_id;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } integration_time_us;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } integrated_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } integrated_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } integrated_xgyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } integrated_ygyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } integrated_zgyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } temperature;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } quality;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_delta_distance_us;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } distance;
	} align(1);
};

event {
	id = 75;
	name = "HIL_SENSOR";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } zacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xgyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ygyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } zgyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xmag;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ymag;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } zmag;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } abs_pressure;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } diff_pressure;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pressure_alt;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } temperature;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } fields_updated;
	} align(1);
};

event {
	id = 76;
	name = "SIM_STATE";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q1;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q2;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q3;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q4;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } zacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xgyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ygyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } zgyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } lat;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } lon;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } alt;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } std_dev_horz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } std_dev_vert;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vn;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ve;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vd;
	} align(1);
};

event {
	id = 77;
	name = "RADIO_STATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rssi;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } remrssi;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } txbuf;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } noise;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } remnoise;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rxerrors;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } fixed;
	} align(1);
};

event {
	id = 78;
	name = "FILE_TRANSFER_PROTOCOL";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_network;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } payload[251];
	} align(1);
};

event {
	id = 79;
	name = "TIMESYNC";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } tc1;
		integer { size = 64; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ts1;
	} align(1);
};

event {
	id = 80;
	name = "CAMERA_TRIGGER";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seq;
	} align(1);
};

event {
	id = 81;
	name = "HIL_GPS";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } fix_type;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } alt;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } eph;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } epv;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } vel;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vn;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ve;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vd;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } cog;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } satellites_visible;
	} align(1);
};

event {
	id = 82;
	name = "HIL_OPTICAL_FLOW";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } sensor_id;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } integration_time_us;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } integrated_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } integrated_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } integrated_xgyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } integrated_ygyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } integrated_zgyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } temperature;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } quality;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_delta_distance_us;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } distance;
	} align(1);
};

event {
	id = 83;
	name = "HIL_STATE_QUATERNION";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } attitude_quaternion[4];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } rollspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitchspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yawspeed;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } alt;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vx;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vy;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } vz;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } ind_airspeed;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } true_airspeed;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } yacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zacc;
	} align(1);
};

event {
	id = 84;
	name = "SCALED_IMU2";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } yacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xgyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ygyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zgyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xmag;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ymag;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zmag;
	} align(1);
};

event {
	id = 85;
	name = "LOG_REQUEST_LIST";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } start;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } end;
	} align(1);
};

event {
	id = 86;
	name = "LOG_ENTRY";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } id;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } num_logs;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } last_log_num;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_utc;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } size;
	} align(1);
};

event {
	id = 87;
	name = "LOG_REQUEST_DATA";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } id;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } ofs;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } count;
	} align(1);
};

event {
	id = 88;
	name = "LOG_DATA";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } id;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } ofs;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } count;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } data[90];
	} align(1);
};

event {
	id = 89;
	name = "LOG_ERASE";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
	} align(1);
};

event {
	id = 90;
	name = "LOG_REQUEST_END";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
	} align(1);
};

event {
	id = 91;
	name = "GPS_INJECT_DATA";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } len;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } data[110];
	} align(1);
};

event {
	id = 92;
	name = "GPS2_RAW";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GPS_FIX_TYPE_NO_GPS" = 0, "GPS_FIX_TYPE_NO_FIX" = 1, "GPS_FIX_TYPE_2D_FIX" = 2, "GPS_FIX_TYPE_3D_FIX" = 3, "GPS_FIX_TYPE_DGPS" = 4, "GPS_FIX_TYPE_RTK_FLOAT" = 5, "GPS_FIX_TYPE_RTK_FIXED" = 6, "GPS_FIX_TYPE_STATIC" = 7, "GPS_FIX_TYPE_PPP" = 8 } fix_type;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } alt;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } eph;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } epv;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } vel;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } cog;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } satellites_visible;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } dgps_numch;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } dgps_age;
	} align(1);
};

event {
	id = 93;
	name = "POWER_STATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } Vcc;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } Vservo;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_POWER_STATUS_BRICK_VALID" = 1, "MAV_POWER_STATUS_SERVO_VALID" = 2, "MAV_POWER_STATUS_USB_CONNECTED" = 4, "MAV_POWER_STATUS_PERIPH_OVERCURRENT" = 8, "MAV_POWER_STATUS_PERIPH_HIPOWER_OVERCURRENT" = 16, "MAV_POWER_STATUS_CHANGED" = 32 } flags;
	} align(1);
};

event {
	id = 94;
	name = "SERIAL_CONTROL";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "SERIAL_CONTROL_DEV_TELEM1" = 0, "SERIAL_CONTROL_DEV_TELEM2" = 1, "SERIAL_CONTROL_DEV_GPS1" = 2, "SERIAL_CONTROL_DEV_GPS2" = 3, "SERIAL_CONTROL_DEV_SHELL" = 10 } device;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "SERIAL_CONTROL_FLAG_REPLY" = 1, "SERIAL_CONTROL_FLAG_RESPOND" = 2, "SERIAL_CONTROL_FLAG_EXCLUSIVE" = 4, "SERIAL_CONTROL_FLAG_BLOCKING" = 8, "SERIAL_CONTROL_FLAG_MULTI" = 16 } flags;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } timeout;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } baudrate;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } count;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } data[70];
	} align(1);
};

event {
	id = 95;
	name = "GPS_RTK";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_last_baseline_ms;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rtk_receiver_id;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } wn;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } tow;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rtk_health;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rtk_rate;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } nsats;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "RTK_BASELINE_COORDINATE_SYSTEM_ECEF" = 0, "RTK_BASELINE_COORDINATE_SYSTEM_NED" = 1 } baseline_coords_type;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } baseline_a_mm;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } baseline_b_mm;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } baseline_c_mm;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } accuracy;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } iar_num_hypotheses;
	} align(1);
};

event {
	id = 96;
	name = "GPS2_RTK";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_last_baseline_ms;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rtk_receiver_id;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } wn;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } tow;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rtk_health;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rtk_rate;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } nsats;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "RTK_BASELINE_COORDINATE_SYSTEM_ECEF" = 0, "RTK_BASELINE_COORDINATE_SYSTEM_NED" = 1 } baseline_coords_type;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } baseline_a_mm;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } baseline_b_mm;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } baseline_c_mm;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } accuracy;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } iar_num_hypotheses;
	} align(1);
};

event {
	id = 97;
	name = "SCALED_IMU3";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } yacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zacc;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xgyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ygyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zgyro;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } xmag;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ymag;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zmag;
	} align(1);
};

event {
	id = 98;
	name = "DATA_TRANSMISSION_HANDSHAKE";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } size;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } width;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } height;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } packets;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } payload;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } jpg_quality;
	} align(1);
};

event {
	id = 99;
	name = "ENCAPSULATED_DATA";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seqnr;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } data[253];
	} align(1);
};

event {
	id = 100;
	name = "DISTANCE_SENSOR";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } min_distance;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } max_distance;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } current_distance;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_DISTANCE_SENSOR_LASER" = 0, "MAV_DISTANCE_SENSOR_ULTRASOUND" = 1, "MAV_DISTANCE_SENSOR_INFRARED" = 2, "MAV_DISTANCE_SENSOR_RADAR" = 3, "MAV_DISTANCE_SENSOR_UNKNOWN" = 4 } type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } id;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_SENSOR_ROTATION_NONE" = 0, "MAV_SENSOR_ROTATION_YAW_45" = 1, "MAV_SENSOR_ROTATION_YAW_90" = 2, "MAV_SENSOR_ROTATION_YAW_135" = 3, "MAV_SENSOR_ROTATION_YAW_180" = 4, "MAV_SENSOR_ROTATION_YAW_225" = 5, "MAV_SENSOR_ROTATION_YAW_270" = 6, "MAV_SENSOR_ROTATION_YAW_315" = 7, "MAV_SENSOR_ROTATION_ROLL_180" = 8, "MAV_SENSOR_ROTATION_ROLL_180_YAW_45" = 9, "MAV_SENSOR_ROTATION_ROLL_180_YAW_90" = 10, "MAV_SENSOR_ROTATION_ROLL_180_YAW_135" = 11, "MAV_SENSOR_ROTATION_PITCH_180" = 12, "MAV_SENSOR_ROTATION_ROLL_180_YAW_225" = 13, "MAV_SENSOR_ROTATION_ROLL_180_YAW_270" = 14, "MAV_SENSOR_ROTATION_ROLL_180_YAW_315" = 15, "MAV_SENSOR_ROTATION_ROLL_90" = 16, "MAV_SENSOR_ROTATION_ROLL_90_YAW_45" = 17, "MAV_SENSOR_ROTATION_ROLL_90_YAW_90" = 18, "MAV_SENSOR_ROTATION_ROLL_90_YAW_135" = 19, "MAV_SENSOR_ROTATION_ROLL_270" = 20, "MAV_SENSOR_ROTATION_ROLL_270_YAW_45" = 21, "MAV_SENSOR_ROTATION_ROLL_270_YAW_90" = 22, "MAV_SENSOR_ROTATION_ROLL_270_YAW_135" = 23, "MAV_SENSOR_ROTATION_PITCH_90" = 24, "MAV_SENSOR_ROTATION_PITCH_270" = 25, "MAV_SENSOR_ROTATION_PITCH_180_YAW_90" = 26, "MAV_SENSOR_ROTATION_PITCH_180_YAW_270" = 27, "MAV_SENSOR_ROTATION_ROLL_90_PITCH_90" = 28, "MAV_SENSOR_ROTATION_ROLL_180_PITCH_90" = 29, "MAV_SENSOR_ROTATION_ROLL_270_PITCH_90" = 30, "MAV_SENSOR_ROTATION_ROLL_90_PITCH_180" = 31, "MAV_SENSOR_ROTATION_ROLL_270_PITCH_180" = 32, "MAV_SENSOR_ROTATION_ROLL_90_PITCH_270" = 33, "MAV_SENSOR_ROTATION_ROLL_180_PITCH_270" = 34, "MAV_SENSOR_ROTATION_ROLL_270_PITCH_270" = 35, "MAV_SENSOR_ROTATION_ROLL_90_PITCH_180_YAW_90" = 36, "MAV_SENSOR_ROTATION_ROLL_90_YAW_270" = 37, "MAV_SENSOR_ROTATION_ROLL_315_PITCH_315_YAW_315" = 38 } orientation;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } covariance;
	} align(1);
};

event {
	id = 101;
	name = "TERRAIN_REQUEST";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } grid_spacing;
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } mask;
	} align(1);
};

event {
	id = 102;
	name = "TERRAIN_DATA";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } grid_spacing;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } gridbit;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } data[16];
	} align(1);
};

event {
	id = 103;
	name = "TERRAIN_CHECK";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
	} align(1);
};

event {
	id = 104;
	name = "TERRAIN_REPORT";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } spacing;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } terrain_height;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } current_height;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } pending;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } loaded;
	} align(1);
};

event {
	id = 105;
	name = "SCALED_PRESSURE2";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } press_abs;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } press_diff;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } temperature;
	} align(1);
};

event {
	id = 106;
	name = "ATT_POS_MOCAP";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q[4];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
	} align(1);
};

event {
	id = 107;
	name = "SET_ACTUATOR_CONTROL_TARGET";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } group_mlx;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } controls[8];
	} align(1);
};

event {
	id = 108;
	name = "ACTUATOR_CONTROL_TARGET";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } group_mlx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } controls[8];
	} align(1);
};

event {
	id = 109;
	name = "ALTITUDE";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } altitude_monotonic;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } altitude_amsl;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } altitude_local;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } altitude_relative;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } altitude_terrain;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } bottom_clearance;
	} align(1);
};

event {
	id = 110;
	name = "RESOURCE_REQUEST";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } request_id;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } uri_type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } uri[120];
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } transfer_type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } storage[120];
	} align(1);
};

event {
	id = 111;
	name = "SCALED_PRESSURE3";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } press_abs;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } press_diff;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } temperature;
	} align(1);
};

event {
	id = 112;
	name = "FOLLOW_TARGET";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } timestamp;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } est_capabilities;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } alt;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vel[3];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } acc[3];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } attitude_q[4];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } rates[3];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } position_cov[3];
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } custom_state;
	} align(1);
};

event {
	id = 113;
	name = "CONTROL_SYSTEM_STATE";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x_acc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y_acc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z_acc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x_vel;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y_vel;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z_vel;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x_pos;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y_pos;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z_pos;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } airspeed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vel_variance[3];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pos_variance[3];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q[4];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll_rate;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch_rate;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw_rate;
	} align(1);
};

event {
	id = 114;
	name = "BATTERY_STATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } id;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_BATTERY_FUNCTION_UNKNOWN" = 0, "MAV_BATTERY_FUNCTION_ALL" = 1, "MAV_BATTERY_FUNCTION_PROPULSION" = 2, "MAV_BATTERY_FUNCTION_AVIONICS" = 3, "MAV_BATTERY_TYPE_PAYLOAD" = 4 } battery_function;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_BATTERY_TYPE_UNKNOWN" = 0, "MAV_BATTERY_TYPE_LIPO" = 1, "MAV_BATTERY_TYPE_LIFE" = 2, "MAV_BATTERY_TYPE_LION" = 3, "MAV_BATTERY_TYPE_NIMH" = 4 } type;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } temperature;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } voltages[10];
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } current_battery;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } current_consumed;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } energy_consumed;
		integer { size = 8; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } battery_remaining;
	} align(1);
};

event {
	id = 115;
	name = "AUTOPILOT_VERSION";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT" = 1, "MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT" = 2, "MAV_PROTOCOL_CAPABILITY_MISSION_INT" = 4, "MAV_PROTOCOL_CAPABILITY_COMMAND_INT" = 8, "MAV_PROTOCOL_CAPABILITY_PARAM_UNION" = 16, "MAV_PROTOCOL_CAPABILITY_FTP" = 32, "MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET" = 64, "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED" = 128, "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT" = 256, "MAV_PROTOCOL_CAPABILITY_TERRAIN" = 512, "MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET" = 1024, "MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION" = 2048, "MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION" = 4096, "MAV_PROTOCOL_CAPABILITY_MAVLINK2" = 8192, "MAV_PROTOCOL_CAPABILITY_MISSION_FENCE" = 16384, "MAV_PROTOCOL_CAPABILITY_MISSION_RALLY" = 32768, "MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION" = 65536 } capabilities;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } flight_sw_version;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } middleware_sw_version;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } os_sw_version;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } board_version;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } flight_custom_version[8];
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } middleware_custom_version[8];
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } os_custom_version[8];
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } vendor_id;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } product_id;
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } uid;
	} align(1);
};

event {
	id = 116;
	name = "LANDING_TARGET";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_num;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_FRAME_GLOBAL" = 0, "MAV_FRAME_LOCAL_NED" = 1, "MAV_FRAME_MISSION" = 2, "MAV_FRAME_GLOBAL_RELATIVE_ALT" = 3, "MAV_FRAME_LOCAL_ENU" = 4, "MAV_FRAME_GLOBAL_INT" = 5, "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT" = 6, "MAV_FRAME_LOCAL_OFFSET_NED" = 7, "MAV_FRAME_BODY_NED" = 8, "MAV_FRAME_BODY_OFFSET_NED" = 9, "MAV_FRAME_GLOBAL_TERRAIN_ALT" = 10, "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT" = 11, "MAV_FRAME_BODY_FRD" = 12, "MAV_FRAME_BODY_FLU" = 13, "MAV_FRAME_MOCAP_NED" = 14, "MAV_FRAME_MOCAP_ENU" = 15, "MAV_FRAME_VISION_NED" = 16, "MAV_FRAME_VISION_ENU" = 17, "MAV_FRAME_ESTIM_NED" = 18, "MAV_FRAME_ESTIM_ENU" = 19 } frame;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } angle_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } angle_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } distance;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } size_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } size_y;
	} align(1);
};

event {
	id = 117;
	name = "ESTIMATOR_STATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "ESTIMATOR_ATTITUDE" = 1, "ESTIMATOR_VELOCITY_HORIZ" = 2, "ESTIMATOR_VELOCITY_VERT" = 4, "ESTIMATOR_POS_HORIZ_REL" = 8, "ESTIMATOR_POS_HORIZ_ABS" = 16, "ESTIMATOR_POS_VERT_ABS" = 32, "ESTIMATOR_POS_VERT_AGL" = 64, "ESTIMATOR_CONST_POS_MODE" = 128, "ESTIMATOR_PRED_POS_HORIZ_REL" = 256, "ESTIMATOR_PRED_POS_HORIZ_ABS" = 512, "ESTIMATOR_GPS_GLITCH" = 1024, "ESTIMATOR_ACCEL_ERROR" = 2048 } flags;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vel_ratio;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pos_horiz_ratio;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pos_vert_ratio;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } mag_ratio;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } hagl_ratio;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } tas_ratio;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pos_horiz_accuracy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pos_vert_accuracy;
	} align(1);
};

event {
	id = 118;
	name = "WIND_COV";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } wind_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } wind_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } wind_z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } var_horiz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } var_vert;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } wind_alt;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } horiz_accuracy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vert_accuracy;
	} align(1);
};

event {
	id = 119;
	name = "GPS_INPUT";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } gps_id;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GPS_INPUT_IGNORE_FLAG_ALT" = 1, "GPS_INPUT_IGNORE_FLAG_HDOP" = 2, "GPS_INPUT_IGNORE_FLAG_VDOP" = 4, "GPS_INPUT_IGNORE_FLAG_VEL_HORIZ" = 8, "GPS_INPUT_IGNORE_FLAG_VEL_VERT" = 16, "GPS_INPUT_IGNORE_FLAG_SPEED_ACCURACY" = 32, "GPS_INPUT_IGNORE_FLAG_HORIZONTAL_ACCURACY" = 64, "GPS_INPUT_IGNORE_FLAG_VERTICAL_ACCURACY" = 128 } ignore_flags;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_week_ms;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_week;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } fix_type;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } alt;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } hdop;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vdop;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vn;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ve;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vd;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } speed_accuracy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } horiz_accuracy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vert_accuracy;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } satellites_visible;
	} align(1);
};

event {
	id = 120;
	name = "GPS_RTCM_DATA";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } flags;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } len;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } data[180];
	} align(1);
};

event {
	id = 121;
	name = "HIGH_LATENCY";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_MODE_FLAG_CUSTOM_MODE_ENABLED" = 1, "MAV_MODE_FLAG_TEST_ENABLED" = 2, "MAV_MODE_FLAG_AUTO_ENABLED" = 4, "MAV_MODE_FLAG_GUIDED_ENABLED" = 8, "MAV_MODE_FLAG_STABILIZE_ENABLED" = 16, "MAV_MODE_FLAG_HIL_ENABLED" = 32, "MAV_MODE_FLAG_MANUAL_INPUT_ENABLED" = 64, "MAV_MODE_FLAG_SAFETY_ARMED" = 128 } base_mode;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } custom_mode;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_LANDED_STATE_UNDEFINED" = 0, "MAV_LANDED_STATE_ON_GROUND" = 1, "MAV_LANDED_STATE_IN_AIR" = 2, "MAV_LANDED_STATE_TAKEOFF" = 3, "MAV_LANDED_STATE_LANDING" = 4 } landed_state;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } roll;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } pitch;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } heading;
		integer { size = 8; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } throttle;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } heading_sp;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } latitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } longitude;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } altitude_amsl;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } altitude_sp;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } airspeed;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } airspeed_sp;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } groundspeed;
		integer { size = 8; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } climb_rate;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } gps_nsat;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GPS_FIX_TYPE_NO_GPS" = 0, "GPS_FIX_TYPE_NO_FIX" = 1, "GPS_FIX_TYPE_2D_FIX" = 2, "GPS_FIX_TYPE_3D_FIX" = 3, "GPS_FIX_TYPE_DGPS" = 4, "GPS_FIX_TYPE_RTK_FLOAT" = 5, "GPS_FIX_TYPE_RTK_FIXED" = 6, "GPS_FIX_TYPE_STATIC" = 7, "GPS_FIX_TYPE_PPP" = 8 } gps_fix_type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } battery_remaining;
		integer { size = 8; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } temperature;
		integer { size = 8; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } temperature_air;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } failsafe;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } wp_num;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } wp_distance;
	} align(1);
};

event {
	id = 122;
	name = "VIBRATION";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vibration_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vibration_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vibration_z;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } clipping_0;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } clipping_1;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } clipping_2;
	} align(1);
};

event {
	id = 123;
	name = "HOME_POSITION";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } latitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } longitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } altitude;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q[4];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } approach_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } approach_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } approach_z;
	} align(1);
};

event {
	id = 124;
	name = "SET_HOME_POSITION";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } latitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } longitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } altitude;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } q[4];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } approach_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } approach_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } approach_z;
	} align(1);
};

event {
	id = 125;
	name = "MESSAGE_INTERVAL";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } message_id;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } interval_us;
	} align(1);
};

event {
	id = 126;
	name = "EXTENDED_SYS_STATE";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_VTOL_STATE_UNDEFINED" = 0, "MAV_VTOL_STATE_TRANSITION_TO_FW" = 1, "MAV_VTOL_STATE_TRANSITION_TO_MC" = 2, "MAV_VTOL_STATE_MC" = 3, "MAV_VTOL_STATE_FW" = 4 } vtol_state;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_LANDED_STATE_UNDEFINED" = 0, "MAV_LANDED_STATE_ON_GROUND" = 1, "MAV_LANDED_STATE_IN_AIR" = 2, "MAV_LANDED_STATE_TAKEOFF" = 3, "MAV_LANDED_STATE_LANDING" = 4 } landed_state;
	} align(1);
};

event {
	id = 127;
	name = "ADSB_VEHICLE";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } ICAO_address;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lon;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "ADSB_ALTITUDE_TYPE_PRESSURE_QNH" = 0, "ADSB_ALTITUDE_TYPE_GEOMETRIC" = 1 } altitude_type;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } altitude;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } heading;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } hor_velocity;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } ver_velocity;
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } callsign[9];
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "ADSB_EMITTER_TYPE_NO_INFO" = 0, "ADSB_EMITTER_TYPE_LIGHT" = 1, "ADSB_EMITTER_TYPE_SMALL" = 2, "ADSB_EMITTER_TYPE_LARGE" = 3, "ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE" = 4, "ADSB_EMITTER_TYPE_HEAVY" = 5, "ADSB_EMITTER_TYPE_HIGHLY_MANUV" = 6, "ADSB_EMITTER_TYPE_ROTOCRAFT" = 7, "ADSB_EMITTER_TYPE_UNASSIGNED" = 8, "ADSB_EMITTER_TYPE_GLIDER" = 9, "ADSB_EMITTER_TYPE_LIGHTER_AIR" = 10, "ADSB_EMITTER_TYPE_PARACHUTE" = 11, "ADSB_EMITTER_TYPE_ULTRA_LIGHT" = 12, "ADSB_EMITTER_TYPE_UNASSIGNED2" = 13, "ADSB_EMITTER_TYPE_UAV" = 14, "ADSB_EMITTER_TYPE_SPACE" = 15, "ADSB_EMITTER_TYPE_UNASSGINED3" = 16, "ADSB_EMITTER_TYPE_EMERGENCY_SURFACE" = 17, "ADSB_EMITTER_TYPE_SERVICE_SURFACE" = 18, "ADSB_EMITTER_TYPE_POINT_OBSTACLE" = 19 } emitter_type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } tslc;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "ADSB_FLAGS_VALID_COORDS" = 1, "ADSB_FLAGS_VALID_ALTITUDE" = 2, "ADSB_FLAGS_VALID_HEADING" = 4, "ADSB_FLAGS_VALID_VELOCITY" = 8, "ADSB_FLAGS_VALID_CALLSIGN" = 16, "ADSB_FLAGS_VALID_SQUAWK" = 32, "ADSB_FLAGS_SIMULATED" = 64 } flags;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } squawk;
	} align(1);
};

event {
	id = 128;
	name = "COLLISION";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_COLLISION_SRC_ADSB" = 0, "MAV_COLLISION_SRC_MAVLINK_GPS_GLOBAL_INT" = 1 } src;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } id;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_COLLISION_ACTION_NONE" = 0, "MAV_COLLISION_ACTION_REPORT" = 1, "MAV_COLLISION_ACTION_ASCEND_OR_DESCEND" = 2, "MAV_COLLISION_ACTION_MOVE_HORIZONTALLY" = 3, "MAV_COLLISION_ACTION_MOVE_PERPENDICULAR" = 4, "MAV_COLLISION_ACTION_RTL" = 5, "MAV_COLLISION_ACTION_HOVER" = 6 } action;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_COLLISION_THREAT_LEVEL_NONE" = 0, "MAV_COLLISION_THREAT_LEVEL_LOW" = 1, "MAV_COLLISION_THREAT_LEVEL_HIGH" = 2 } threat_level;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } time_to_minimum_delta;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } altitude_minimum_delta;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } horizontal_minimum_delta;
	} align(1);
};

event {
	id = 129;
	name = "V2_EXTENSION";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_network;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } message_type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } payload[249];
	} align(1);
};

event {
	id = 130;
	name = "MEMORY_VECT";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } address;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } ver;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type;
		integer { size = 8; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } value[32];
	} align(1);
};

event {
	id = 131;
	name = "DEBUG_VECT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } name[10];
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } z;
	} align(1);
};

event {
	id = 132;
	name = "NAMED_VALUE_FLOAT";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } name[10];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } value;
	} align(1);
};

event {
	id = 133;
	name = "NAMED_VALUE_INT";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } name[10];
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } value;
	} align(1);
};

event {
	id = 134;
	name = "STATUSTEXT";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_SEVERITY_EMERGENCY" = 0, "MAV_SEVERITY_ALERT" = 1, "MAV_SEVERITY_CRITICAL" = 2, "MAV_SEVERITY_ERROR" = 3, "MAV_SEVERITY_WARNING" = 4, "MAV_SEVERITY_NOTICE" = 5, "MAV_SEVERITY_INFO" = 6, "MAV_SEVERITY_DEBUG" = 7 } severity;
		integer { size = 8; align = 1; signed = false; encoding = ASCII; base = hexadecimal; byte_order = le; } text[50];
	} align(1);
};

event {
	id = 135;
	name = "DEBUG";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_boot_ms;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } ind;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } value;
	} align(1);
};

event {
	id = 136;
	name = "SENSOR_OFFSETS";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } mag_ofs_x;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } mag_ofs_y;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } mag_ofs_z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } mag_declination;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } raw_press;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } raw_temp;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } gyro_cal_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } gyro_cal_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } gyro_cal_z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } accel_cal_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } accel_cal_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } accel_cal_z;
	} align(1);
};

event {
	id = 137;
	name = "SET_MAG_OFFSETS";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } mag_ofs_x;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } mag_ofs_y;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } mag_ofs_z;
	} align(1);
};

event {
	id = 138;
	name = "MEMINFO";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } brkval;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } freemem;
	} align(1);
};

event {
	id = 139;
	name = "AP_ADC";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } adc1;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } adc2;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } adc3;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } adc4;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } adc5;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } adc6;
	} align(1);
};

event {
	id = 140;
	name = "DIGICAM_CONFIGURE";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } mode;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } shutter_speed;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } aperture;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } iso;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } exposure_type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } command_id;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } engine_cut_off;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } extra_param;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } extra_value;
	} align(1);
};

event {
	id = 141;
	name = "DIGICAM_CONTROL";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } session;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } zoom_pos;
		integer { size = 8; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } zoom_step;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } focus_lock;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } shot;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } command_id;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } extra_param;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } extra_value;
	} align(1);
};

event {
	id = 142;
	name = "MOUNT_CONFIGURE";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_MOUNT_MODE_RETRACT" = 0, "MAV_MOUNT_MODE_NEUTRAL" = 1, "MAV_MOUNT_MODE_MAVLINK_TARGETING" = 2, "MAV_MOUNT_MODE_RC_TARGETING" = 3, "MAV_MOUNT_MODE_GPS_POINT" = 4 } mount_mode;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } stab_roll;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } stab_pitch;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } stab_yaw;
	} align(1);
};

event {
	id = 143;
	name = "MOUNT_CONTROL";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } input_a;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } input_b;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } input_c;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } save_position;
	} align(1);
};

event {
	id = 144;
	name = "MOUNT_STATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } pointing_a;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } pointing_b;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } pointing_c;
	} align(1);
};

event {
	id = 145;
	name = "FENCE_POINT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } idx;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } count;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } lat;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } lng;
	} align(1);
};

event {
	id = 146;
	name = "FENCE_FETCH_POINT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } idx;
	} align(1);
};

event {
	id = 147;
	name = "FENCE_STATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } breach_status;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } breach_count;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "FENCE_BREACH_NONE" = 0, "FENCE_BREACH_MINALT" = 1, "FENCE_BREACH_MAXALT" = 2, "FENCE_BREACH_BOUNDARY" = 3 } breach_type;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } breach_time;
	} align(1);
};

event {
	id = 148;
	name = "AHRS";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } omegaIx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } omegaIy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } omegaIz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } accel_weight;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } renorm_val;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } error_rp;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } error_yaw;
	} align(1);
};

event {
	id = 149;
	name = "SIMSTATE";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } zacc;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } xgyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ygyro;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } zgyro;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lng;
	} align(1);
};

event {
	id = 150;
	name = "HWSTATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } Vcc;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } I2Cerr;
	} align(1);
};

event {
	id = 151;
	name = "RADIO";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rssi;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } remrssi;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } txbuf;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } noise;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } remnoise;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } rxerrors;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } fixed;
	} align(1);
};

event {
	id = 152;
	name = "LIMITS_STATUS";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "LIMITS_INIT" = 0, "LIMITS_DISABLED" = 1, "LIMITS_ENABLED" = 2, "LIMITS_TRIGGERED" = 3, "LIMITS_RECOVERING" = 4, "LIMITS_RECOVERED" = 5 } limits_state;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } last_trigger;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } last_action;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } last_recovery;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } last_clear;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } breach_count;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "LIMIT_GPSLOCK" = 1, "LIMIT_GEOFENCE" = 2, "LIMIT_ALTITUDE" = 4 } mods_enabled;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "LIMIT_GPSLOCK" = 1, "LIMIT_GEOFENCE" = 2, "LIMIT_ALTITUDE" = 4 } mods_required;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "LIMIT_GPSLOCK" = 1, "LIMIT_GEOFENCE" = 2, "LIMIT_ALTITUDE" = 4 } mods_triggered;
	} align(1);
};

event {
	id = 153;
	name = "WIND";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } direction;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } speed;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } speed_z;
	} align(1);
};

event {
	id = 154;
	name = "DATA16";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } len;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } data[16];
	} align(1);
};

event {
	id = 155;
	name = "DATA32";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } len;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } data[32];
	} align(1);
};

event {
	id = 156;
	name = "DATA64";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } len;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } data[64];
	} align(1);
};

event {
	id = 157;
	name = "DATA96";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } type;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } len;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } data[96];
	} align(1);
};

event {
	id = 158;
	name = "RANGEFINDER";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } distance;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } voltage;
	} align(1);
};

event {
	id = 159;
	name = "AIRSPEED_AUTOCAL";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vx;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vy;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } vz;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } diff_pressure;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } EAS2TAS;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ratio;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } state_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } state_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } state_z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } Pax;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } Pby;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } Pcz;
	} align(1);
};

event {
	id = 160;
	name = "RALLY_POINT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } idx;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } count;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lng;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } alt;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } break_alt;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } land_dir;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "FAVORABLE_WIND" = 1, "LAND_IMMEDIATELY" = 2 } flags;
	} align(1);
};

event {
	id = 161;
	name = "RALLY_FETCH_POINT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } idx;
	} align(1);
};

event {
	id = 162;
	name = "COMPASSMOT_STATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } throttle;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } current;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } interference;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } CompensationX;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } CompensationY;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } CompensationZ;
	} align(1);
};

event {
	id = 163;
	name = "AHRS2";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } altitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lng;
	} align(1);
};

event {
	id = 164;
	name = "CAMERA_STATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } cam_idx;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } img_idx;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "CAMERA_STATUS_TYPE_HEARTBEAT" = 0, "CAMERA_STATUS_TYPE_TRIGGER" = 1, "CAMERA_STATUS_TYPE_DISCONNECT" = 2, "CAMERA_STATUS_TYPE_ERROR" = 3, "CAMERA_STATUS_TYPE_LOWBATT" = 4, "CAMERA_STATUS_TYPE_LOWSTORE" = 5, "CAMERA_STATUS_TYPE_LOWSTOREV" = 6 } event_id;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p1;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p2;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p3;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } p4;
	} align(1);
};

event {
	id = 165;
	name = "CAMERA_FEEDBACK";
	stream_id = 0;
	fields := struct {
		integer { size = 64; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } time_usec;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } cam_idx;
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } img_idx;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lng;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } alt_msl;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } alt_rel;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } foc_len;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "CAMERA_FEEDBACK_PHOTO" = 0, "CAMERA_FEEDBACK_VIDEO" = 1, "CAMERA_FEEDBACK_BADEXPOSURE" = 2, "CAMERA_FEEDBACK_CLOSEDLOOP" = 3, "CAMERA_FEEDBACK_OPENLOOP" = 4 } flags;
	} align(1);
};

event {
	id = 166;
	name = "BATTERY2";
	stream_id = 0;
	fields := struct {
		integer { size = 16; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } voltage;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } current_battery;
	} align(1);
};

event {
	id = 167;
	name = "AHRS3";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pitch;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } yaw;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } altitude;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } lng;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } v1;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } v2;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } v3;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } v4;
	} align(1);
};

event {
	id = 168;
	name = "AUTOPILOT_VERSION_REQUEST";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
	} align(1);
};

event {
	id = 169;
	name = "REMOTE_LOG_DATA_BLOCK";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_REMOTE_LOG_DATA_BLOCK_STOP" = 2147483645, "MAV_REMOTE_LOG_DATA_BLOCK_START" = 2147483646 } seqno;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } data[200];
	} align(1);
};

event {
	id = 170;
	name = "REMOTE_LOG_BLOCK_STATUS";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } seqno;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAV_REMOTE_LOG_DATA_BLOCK_NACK" = 0, "MAV_REMOTE_LOG_DATA_BLOCK_ACK" = 1 } status;
	} align(1);
};

event {
	id = 171;
	name = "LED_CONTROL";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } instance;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } pattern;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } custom_len;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } custom_bytes[24];
	} align(1);
};

event {
	id = 172;
	name = "MAG_CAL_PROGRESS";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } compass_id;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } cal_mask;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAG_CAL_NOT_STARTED" = 0, "MAG_CAL_WAITING_TO_START" = 1, "MAG_CAL_RUNNING_STEP_ONE" = 2, "MAG_CAL_RUNNING_STEP_TWO" = 3, "MAG_CAL_SUCCESS" = 4, "MAG_CAL_FAILED" = 5, "MAG_CAL_BAD_ORIENTATION" = 6 } cal_status;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } attempt;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } completion_pct;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } completion_mask[10];
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } direction_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } direction_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } direction_z;
	} align(1);
};

event {
	id = 173;
	name = "MAG_CAL_REPORT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } compass_id;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } cal_mask;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "MAG_CAL_NOT_STARTED" = 0, "MAG_CAL_WAITING_TO_START" = 1, "MAG_CAL_RUNNING_STEP_ONE" = 2, "MAG_CAL_RUNNING_STEP_TWO" = 3, "MAG_CAL_SUCCESS" = 4, "MAG_CAL_FAILED" = 5, "MAG_CAL_BAD_ORIENTATION" = 6 } cal_status;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } autosaved;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } fitness;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ofs_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ofs_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } ofs_z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } diag_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } diag_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } diag_z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } offdiag_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } offdiag_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } offdiag_z;
	} align(1);
};

event {
	id = 174;
	name = "EKF_STATUS_REPORT";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "EKF_ATTITUDE" = 1, "EKF_VELOCITY_HORIZ" = 2, "EKF_VELOCITY_VERT" = 4, "EKF_POS_HORIZ_REL" = 8, "EKF_POS_HORIZ_ABS" = 16, "EKF_POS_VERT_ABS" = 32, "EKF_POS_VERT_AGL" = 64, "EKF_CONST_POS_MODE" = 128, "EKF_PRED_POS_HORIZ_REL" = 256, "EKF_PRED_POS_HORIZ_ABS" = 512 } flags;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } velocity_variance;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pos_horiz_variance;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } pos_vert_variance;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } compass_variance;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } terrain_alt_variance;
	} align(1);
};

event {
	id = 175;
	name = "PID_TUNING";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "PID_TUNING_ROLL" = 1, "PID_TUNING_PITCH" = 2, "PID_TUNING_YAW" = 3, "PID_TUNING_ACCZ" = 4, "PID_TUNING_STEER" = 5, "PID_TUNING_LANDING" = 6 } axis;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } desired;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } achieved;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } FF;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } P;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } I;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } D;
	} align(1);
};

event {
	id = 176;
	name = "DEEPSTALL";
	stream_id = 0;
	fields := struct {
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } landing_lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } landing_lon;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } path_lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } path_lon;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } arc_entry_lat;
		integer { size = 32; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } arc_entry_lon;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } altitude;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } expected_travel_distance;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } cross_track_error;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "DEEPSTALL_STAGE_FLY_TO_LANDING" = 0, "DEEPSTALL_STAGE_ESTIMATE_WIND" = 1, "DEEPSTALL_STAGE_WAIT_FOR_BREAKOUT" = 2, "DEEPSTALL_STAGE_FLY_TO_ARC" = 3, "DEEPSTALL_STAGE_ARC" = 4, "DEEPSTALL_STAGE_APPROACH" = 5, "DEEPSTALL_STAGE_LAND" = 6 } stage;
	} align(1);
};

event {
	id = 177;
	name = "GIMBAL_REPORT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } delta_time;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } delta_angle_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } delta_angle_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } delta_angle_z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } delta_velocity_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } delta_velocity_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } delta_velocity_z;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } joint_roll;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } joint_el;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } joint_az;
	} align(1);
};

event {
	id = 178;
	name = "GIMBAL_CONTROL";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } demanded_rate_x;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } demanded_rate_y;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } demanded_rate_z;
	} align(1);
};

event {
	id = 179;
	name = "GIMBAL_TORQUE_CMD_REPORT";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } rl_torque_cmd;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } el_torque_cmd;
		integer { size = 16; align = 1; signed = true; encoding = none; base = hexadecimal; byte_order = le; } az_torque_cmd;
	} align(1);
};

event {
	id = 180;
	name = "GOPRO_HEARTBEAT";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GOPRO_HEARTBEAT_STATUS_DISCONNECTED" = 0, "GOPRO_HEARTBEAT_STATUS_INCOMPATIBLE" = 1, "GOPRO_HEARTBEAT_STATUS_CONNECTED" = 2, "GOPRO_HEARTBEAT_STATUS_ERROR" = 3 } status;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GOPRO_CAPTURE_MODE_VIDEO" = 0, "GOPRO_CAPTURE_MODE_PHOTO" = 1, "GOPRO_CAPTURE_MODE_BURST" = 2, "GOPRO_CAPTURE_MODE_TIME_LAPSE" = 3, "GOPRO_CAPTURE_MODE_MULTI_SHOT" = 4, "GOPRO_CAPTURE_MODE_PLAYBACK" = 5, "GOPRO_CAPTURE_MODE_SETUP" = 6, "GOPRO_CAPTURE_MODE_UNKNOWN" = 255 } capture_mode;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GOPRO_FLAG_RECORDING" = 1 } flags;
	} align(1);
};

event {
	id = 181;
	name = "GOPRO_GET_REQUEST";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GOPRO_COMMAND_POWER" = 0, "GOPRO_COMMAND_CAPTURE_MODE" = 1, "GOPRO_COMMAND_SHUTTER" = 2, "GOPRO_COMMAND_BATTERY" = 3, "GOPRO_COMMAND_MODEL" = 4, "GOPRO_COMMAND_VIDEO_SETTINGS" = 5, "GOPRO_COMMAND_LOW_LIGHT" = 6, "GOPRO_COMMAND_PHOTO_RESOLUTION" = 7, "GOPRO_COMMAND_PHOTO_BURST_RATE" = 8, "GOPRO_COMMAND_PROTUNE" = 9, "GOPRO_COMMAND_PROTUNE_WHITE_BALANCE" = 10, "GOPRO_COMMAND_PROTUNE_COLOUR" = 11, "GOPRO_COMMAND_PROTUNE_GAIN" = 12, "GOPRO_COMMAND_PROTUNE_SHARPNESS" = 13, "GOPRO_COMMAND_PROTUNE_EXPOSURE" = 14, "GOPRO_COMMAND_TIME" = 15, "GOPRO_COMMAND_CHARGING" = 16 } cmd_id;
	} align(1);
};

event {
	id = 182;
	name = "GOPRO_GET_RESPONSE";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GOPRO_COMMAND_POWER" = 0, "GOPRO_COMMAND_CAPTURE_MODE" = 1, "GOPRO_COMMAND_SHUTTER" = 2, "GOPRO_COMMAND_BATTERY" = 3, "GOPRO_COMMAND_MODEL" = 4, "GOPRO_COMMAND_VIDEO_SETTINGS" = 5, "GOPRO_COMMAND_LOW_LIGHT" = 6, "GOPRO_COMMAND_PHOTO_RESOLUTION" = 7, "GOPRO_COMMAND_PHOTO_BURST_RATE" = 8, "GOPRO_COMMAND_PROTUNE" = 9, "GOPRO_COMMAND_PROTUNE_WHITE_BALANCE" = 10, "GOPRO_COMMAND_PROTUNE_COLOUR" = 11, "GOPRO_COMMAND_PROTUNE_GAIN" = 12, "GOPRO_COMMAND_PROTUNE_SHARPNESS" = 13, "GOPRO_COMMAND_PROTUNE_EXPOSURE" = 14, "GOPRO_COMMAND_TIME" = 15, "GOPRO_COMMAND_CHARGING" = 16 } cmd_id;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GOPRO_REQUEST_SUCCESS" = 0, "GOPRO_REQUEST_FAILED" = 1 } status;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } value[4];
	} align(1);
};

event {
	id = 183;
	name = "GOPRO_SET_REQUEST";
	stream_id = 0;
	fields := struct {
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_system;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } target_component;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GOPRO_COMMAND_POWER" = 0, "GOPRO_COMMAND_CAPTURE_MODE" = 1, "GOPRO_COMMAND_SHUTTER" = 2, "GOPRO_COMMAND_BATTERY" = 3, "GOPRO_COMMAND_MODEL" = 4, "GOPRO_COMMAND_VIDEO_SETTINGS" = 5, "GOPRO_COMMAND_LOW_LIGHT" = 6, "GOPRO_COMMAND_PHOTO_RESOLUTION" = 7, "GOPRO_COMMAND_PHOTO_BURST_RATE" = 8, "GOPRO_COMMAND_PROTUNE" = 9, "GOPRO_COMMAND_PROTUNE_WHITE_BALANCE" = 10, "GOPRO_COMMAND_PROTUNE_COLOUR" = 11, "GOPRO_COMMAND_PROTUNE_GAIN" = 12, "GOPRO_COMMAND_PROTUNE_SHARPNESS" = 13, "GOPRO_COMMAND_PROTUNE_EXPOSURE" = 14, "GOPRO_COMMAND_TIME" = 15, "GOPRO_COMMAND_CHARGING" = 16 } cmd_id;
		integer { size = 8; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } value[4];
	} align(1);
};

event {
	id = 184;
	name = "GOPRO_SET_RESPONSE";
	stream_id = 0;
	fields := struct {
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GOPRO_COMMAND_POWER" = 0, "GOPRO_COMMAND_CAPTURE_MODE" = 1, "GOPRO_COMMAND_SHUTTER" = 2, "GOPRO_COMMAND_BATTERY" = 3, "GOPRO_COMMAND_MODEL" = 4, "GOPRO_COMMAND_VIDEO_SETTINGS" = 5, "GOPRO_COMMAND_LOW_LIGHT" = 6, "GOPRO_COMMAND_PHOTO_RESOLUTION" = 7, "GOPRO_COMMAND_PHOTO_BURST_RATE" = 8, "GOPRO_COMMAND_PROTUNE" = 9, "GOPRO_COMMAND_PROTUNE_WHITE_BALANCE" = 10, "GOPRO_COMMAND_PROTUNE_COLOUR" = 11, "GOPRO_COMMAND_PROTUNE_GAIN" = 12, "GOPRO_COMMAND_PROTUNE_SHARPNESS" = 13, "GOPRO_COMMAND_PROTUNE_EXPOSURE" = 14, "GOPRO_COMMAND_TIME" = 15, "GOPRO_COMMAND_CHARGING" = 16 } cmd_id;
		enum : integer { size = 32; align = 1; signed = false; encoding = none; base = hexadecimal; byte_order = le; } { "GOPRO_REQUEST_SUCCESS" = 0, "GOPRO_REQUEST_FAILED" = 1 } status;
	} align(1);
};

event {
	id = 185;
	name = "RPM";
	stream_id = 0;
	fields := struct {
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } rpm1;
		floating_point { exp_dig = 8; mant_dig = 24; byte_order = le; align = 1; } rpm2;
	} align(1);
};

